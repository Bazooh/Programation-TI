; Zilog eZ80 ANSI C Compiler Release 3.4
; -debug -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAP.C"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",9
.DEFINE "sign"
.VALUE 0
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "mant"
.VALUE 2
.CLASS 8
.DIM 7
.TYPE 108
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",18
.DEFINE "real"
.VALUE 0
.CLASS 8
.TAG "NONAME0"
.TYPE 8
.ENDEF
.DEFINE "imag"
.VALUE 9
.CLASS 8
.TAG "NONAME0"
.TYPE 8
.ENDEF
.ENDREC "NONAME1"
.BEGREC "NONAME2",11
.DEFINE "dim"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME0"
.TYPE 104
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",20
.DEFINE "dim"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME1"
.TYPE 104
.ENDEF
.ENDREC "NONAME3"
.BEGREC "NONAME4",11
.DEFINE "cols"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "rows"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME0"
.TYPE 104
.ENDEF
.ENDREC "NONAME4"
.BEGREC "NONAME5",3
.DEFINE "len"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 98
.ENDEF
.ENDREC "NONAME5"
.BEGREC "NONAME6",3
.DEFINE "len"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 98
.ENDEF
.ENDREC "NONAME6"
.BEGREC "NONAME7",3
.DEFINE "size"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME7"
.BEGREC "font",12
.DEFINE "font"
.VALUE 0
.CLASS 8
.TAG "font"
.TYPE 40
.ENDEF
.DEFINE "drawChar"
.VALUE 3
.CLASS 8
.TYPE 545
.ENDEF
.DEFINE "getWidth"
.VALUE 6
.CLASS 8
.TYPE 558
.ENDEF
.DEFINE "getHeight"
.VALUE 9
.CLASS 8
.TYPE 558
.ENDEF
.ENDREC "font"
.BEGREC "NONAME8",6
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "rem"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME8"
.BEGREC "NONAME9",8
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 5
.ENDEF
.DEFINE "rem"
.VALUE 4
.CLASS 8
.TYPE 5
.ENDEF
.ENDREC "NONAME9"
.BEGREC "header",6
.DEFINE "s"
.VALUE 0
.CLASS 11
.TAG "NONAME10"
.TYPE 8
.ENDEF
.DEFINE "x"
.VALUE 0
.CLASS 11
.TYPE 2
.ENDEF
.ENDREC "header"
.BEGREC "NONAME10",6
.DEFINE "ptr"
.VALUE 0
.CLASS 8
.TAG "header"
.TYPE 40
.ENDEF
.DEFINE "size"
.VALUE 3
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME10"
.BEGREC "s_pos",4
.DEFINE "x"
.VALUE 0
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "y"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "s_pos"
.BEGREC "s_precision_pos",8
.DEFINE "x"
.VALUE 0
.CLASS 8
.TYPE 6
.ENDEF
.DEFINE "y"
.VALUE 4
.CLASS 8
.TYPE 6
.ENDEF
.ENDREC "s_precision_pos"
.BEGREC "s_ball",20
.DEFINE "pos"
.VALUE 0
.CLASS 8
.TAG "s_precision_pos"
.TYPE 8
.ENDEF
.DEFINE "old_pos"
.VALUE 8
.CLASS 8
.TAG "s_pos"
.TYPE 8
.ENDEF
.DEFINE "direction"
.VALUE 12
.CLASS 8
.TYPE 6
.ENDEF
.DEFINE "speed"
.VALUE 16
.CLASS 8
.TYPE 6
.ENDEF
.ENDREC "s_ball"
.BEGREC "s_obstacle",35
.DEFINE "point"
.VALUE 0
.CLASS 8
.DIM 4
.TAG "s_pos"
.TYPE 104
.ENDEF
.DEFINE "ortho"
.VALUE 16
.CLASS 8
.DIM 4
.TYPE 108
.ENDEF
.DEFINE "id"
.VALUE 20
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "life"
.VALUE 21
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "hide"
.VALUE 23
.CLASS 8
.DIM 4
.TYPE 108
.ENDEF
.DEFINE "in_matrix"
.VALUE 27
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "matrix"
.VALUE 28
.CLASS 8
.TAG "s_pos"
.TYPE 8
.ENDEF
.DEFINE "next"
.VALUE 32
.CLASS 8
.TAG "s_obstacle"
.TYPE 40
.ENDEF
.ENDREC "s_obstacle"
;    1	
;    2	#include "map.h"
;    3	
;    4	void setHiddenObstacle(t_obstacle *obstacles, uint8_t id, uint8_t side, uint8_t value) {
_setHiddenObstacle:
.DEFINE "_setHiddenObstacle"

.VALUE _setHiddenObstacle

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "setHiddenObstacle",4,"_setHiddenObstacle"

.LINE 4

.DEFINE "obstacles"

.CLASS 65

.VALUE 6

.TAG "s_obstacle"

.TYPE 40

.ENDEF

.DEFINE "id"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

.DEFINE "side"

.CLASS 65

.VALUE 12

.TYPE 12

.ENDEF

.DEFINE "value"

.CLASS 65

.VALUE 15

.TYPE 12

.ENDEF

.DEFINE "i"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
;    5	    uint8_t i;
;    6	
;    7	    for (i = 0; i < id; ++i) {
.LINE 7

	LD	(IX+-1),0
	JR	L_2
L_0:
;    8	        obstacles = obstacles->next;
.LINE 8

	LD	IY,(IX+6)
	LD	BC,(IY+32)
	LD	(IX+6),BC
	INC	(IX+-1)
;    9	    }
L_2:
.LINE 9

	LD	A,(IX+-1)
	CP	A,(IX+9)
	JR	C,L_0
;   10	    obstacles->hide[side] = value;
.LINE 10

	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	IY,(IX+6)
	LEA	HL,IY+23
	ADD	HL,BC
	LD	A,(IX+15)
	LD	(HL),A
;   11	}
.LINE 11

	LD	SP,IX
	POP	IX
	RET	


;**************************** _setHiddenObstacle ***************************
;Name                         Addr/Register   Size   Type
;i                                     IX-1      1   variable
;value                                IX+15      1   parameter
;side                                 IX+12      1   parameter
;id                                    IX+9      1   parameter
;obstacles                             IX+6      3   parameter


; Stack Frame Size: 19 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "setHiddenObstacle",11,"_setHiddenObstacle"
;   12	
;   13	void setAdjHiddenObstacle(uint8_t matrix[MATRIX_X_LENGTH][MATRIX_Y_LENGTH], t_obstacle *obstacles, uint8_t x, uint8_t y, uint8_t value) {
_setAdjHiddenObstacle:
.DEFINE "_setAdjHiddenObstacle"

.VALUE _setAdjHiddenObstacle

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "setAdjHiddenObstacle",13,"_setAdjHiddenObstacle"

.LINE 13

.DEFINE "matrix"

.CLASS 65

.VALUE 6

.DIM 5

.TYPE 812

.ENDEF

.DEFINE "obstacles"

.CLASS 65

.VALUE 9

.TAG "s_obstacle"

.TYPE 40

.ENDEF

.DEFINE "x"

.CLASS 65

.VALUE 12

.TYPE 12

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 15

.TYPE 12

.ENDEF

.DEFINE "value"

.CLASS 65

.VALUE 18

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-18
	LD	SP,HL
;   14	    if (x >= 1 && matrix[x - 1][y]) {
.LINE 14

	LD	A,(IX+12)
	CP	A,1
	JR	C,L_9
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	A,5
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+15)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_9
;   15	        setHiddenObstacle(obstacles, matrix[x - 1][y], EAST, TRUE);
.LINE 15

	LD	BC,1
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	HL,(IX+-3)
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_setHiddenObstacle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   16	        setHiddenObstacle(obstacles, matrix[x][y], WEST, TRUE);
.LINE 16

	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	LD	A,5
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+15)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_setHiddenObstacle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   17	    }
L_9:
.LINE 17

;   18	    if (y >= 1 && matrix[x][y - 1]) {
.LINE 18

	LD	A,(IX+15)
	CP	A,1
	JR	C,L_12
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	LD	A,5
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	A,(IX+15)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	DEC	BC
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_12
;   19	        setHiddenObstacle(obstacles, matrix[x][y - 1], SOUTH, TRUE);
.LINE 19

	LD	BC,1
	PUSH	BC
	PUSH	BC
	LD	HL,(IX+-9)
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_setHiddenObstacle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   20	        setHiddenObstacle(obstacles, matrix[x][y], NORTH, TRUE);
.LINE 20

	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	LD	A,(IX+15)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_setHiddenObstacle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   21	    }
L_12:
.LINE 21

;   22	    if (x <= MATRIX_X_LENGTH - 2 && matrix[x + 1][y]) {
.LINE 22

	LD	A,3
	CP	A,(IX+12)
	JR	C,L_15
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	INC	HL
	LD	A,5
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+15)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_15
;   23	        setHiddenObstacle(obstacles, matrix[x + 1][y], WEST, TRUE);
.LINE 23

	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	HL,(IX+-12)
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_setHiddenObstacle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   24	        setHiddenObstacle(obstacles, matrix[x][y], EAST, TRUE);
.LINE 24

	LD	BC,1
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	LD	A,5
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+15)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_setHiddenObstacle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   25	    }
L_15:
.LINE 25

;   26	    if (y <= MATRIX_Y_LENGTH - 2 && matrix[x][y + 1]) {
.LINE 26

	LD	A,3
	CP	A,(IX+15)
	JR	C,L_16
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	LD	A,5
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	(IX+-15),HL
	LD	A,(IX+15)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	INC	BC
	LD	HL,(IX+-15)
	ADD	HL,BC
	LD	(IX+-18),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_16
;   27	        setHiddenObstacle(obstacles, matrix[x][y + 1], NORTH, TRUE);
.LINE 27

	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	LD	HL,(IX+-18)
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_setHiddenObstacle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   28	        setHiddenObstacle(obstacles, matrix[x][y], SOUTH, TRUE);
.LINE 28

	LD	BC,1
	PUSH	BC
	PUSH	BC
	LD	A,(IX+15)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-15)
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_setHiddenObstacle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   29	    }
;   30	}
L_16:
.LINE 30

	LD	SP,IX
	POP	IX
	RET	


;**************************** _setAdjHiddenObstacle ***************************
;Name                         Addr/Register   Size   Type
;G_4                                  IX-18      3   variable
;G_5                                  IX-15      3   variable
;G_3                                  IX-12      3   variable
;G_1                                   IX-9      3   variable
;G_2                                   IX-6      3   variable
;G_0                                   IX-3      3   variable
;value                                IX+18      1   parameter
;y                                    IX+15      1   parameter
;x                                    IX+12      1   parameter
;obstacles                             IX+9      3   parameter
;matrix                                IX+6      3   parameter


; Stack Frame Size: 39 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "setAdjHiddenObstacle",30,"_setAdjHiddenObstacle"
;   31	
;   32	void addObstacleRectangleInMatrix(uint8_t matrix[MATRIX_X_LENGTH][MATRIX_Y_LENGTH], t_obstacle *obstacles, uint8_t x, uint8_t y, uint16_t life) {
_addObstacleRectangleInMatrix:
.DEFINE "_addObstacleRectangleInMatrix"

.VALUE _addObstacleRectangleInMatrix

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "addObstacleRectangleInMatrix",32,"_addObstacleRectangleInMatrix"

.LINE 32

.DEFINE "matrix"

.CLASS 65

.VALUE 6

.DIM 5

.TYPE 812

.ENDEF

.DEFINE "obstacles"

.CLASS 65

.VALUE 9

.TAG "s_obstacle"

.TYPE 40

.ENDEF

.DEFINE "x"

.CLASS 65

.VALUE 12

.TYPE 12

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 15

.TYPE 12

.ENDEF

.DEFINE "life"

.CLASS 65

.VALUE 18

.TYPE 13

.ENDEF

.DEFINE "new_elem"

.CLASS 65

.VALUE -3

.TAG "s_obstacle"

.TYPE 40

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;   33	    t_obstacle *new_elem;
;   34	
;   35	    if (!(new_elem = addObstacleRectangle(obstacles, OBSTACLE_X_LENGTH*x + MAP_X_MARGE, OBSTACLE_Y_LENGTH*(uint24_t)y + MAP_Y_MARGE, OBSTACLE_X_LENGTH - 1, OBSTACLE_Y_LENGTH - 1, life))) { return; }
.LINE 35

	LD	BC,(IX+18)
	PUSH	BC
	LD	BC,9
	PUSH	BC
	PUSH	BC
	LD	A,(IX+15)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,10
	CALL	__imulu
	LD	IY,HL
	LEA	BC,IY+10
	PUSH	BC
	LD	B,10
	LD	C,(IX+12)
	MLT	BC
	LD	A,C
	ADD	A,10
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_addObstacleRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-3),HL
	CALL	__icmpzero
	JR	Z,L_26
;   36	
;   37	    new_elem->in_matrix = TRUE;
.LINE 37

	LD	IY,(IX+-3)
	LD	(IY+27),1
;   38	    new_elem->matrix.x = x;
.LINE 38

	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	LD	(IY+28),HL
;   39	    new_elem->matrix.y = y;
.LINE 39

	LD	A,(IX+15)
	LD	(IY+31),A
;   40	
;   41	    matrix[x][y] = new_elem->id;
.LINE 41

	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	LD	A,5
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+15)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(IY+20)
	LD	(HL),A
;   42	
;   43	    setAdjHiddenObstacle(matrix, obstacles, x, y, TRUE);
.LINE 43

	LD	BC,1
	PUSH	BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	C,(IX+12)
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_setAdjHiddenObstacle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   44	
;   45	    if (x == 0) { setHiddenObstacle(obstacles, matrix[x][y], WEST, TRUE); }
.LINE 45

	LD	A,(IX+12)
	OR	A,A
	JR	NZ,L_21
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	LD	A,5
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+15)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_setHiddenObstacle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_21:
;   46	    if (x == MATRIX_X_LENGTH - 1) { setHiddenObstacle(obstacles, matrix[x][y], EAST, TRUE); }
.LINE 46

	LD	A,(IX+12)
	CP	A,4
	JR	NZ,L_23
	LD	BC,1
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	LD	A,5
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+15)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_setHiddenObstacle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_23:
;   47	    if (y == 0) { setHiddenObstacle(obstacles, matrix[x][y], NORTH, TRUE); }
.LINE 47

	LD	A,(IX+15)
	OR	A,A
	JR	NZ,L_25
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	LD	A,5
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+15)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_setHiddenObstacle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_25:
;   48	    if (y == MATRIX_Y_LENGTH - 1) { setHiddenObstacle(obstacles, matrix[x][y], SOUTH, TRUE); }
.LINE 48

	LD	A,(IX+15)
	CP	A,4
	JR	NZ,L_26
	LD	BC,1
	PUSH	BC
	PUSH	BC
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	LD	A,5
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+15)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_setHiddenObstacle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   49	}
L_26:
.LINE 49

	LD	SP,IX
	POP	IX
	RET	


;**************************** _addObstacleRectangleInMatrix ***************************
;Name                         Addr/Register   Size   Type
;_setAdjHiddenObstacle               IMPORT  -----   function
;_addObstacleRectangle               IMPORT  -----   function
;new_elem                              IX-3      3   variable
;life                                 IX+18      2   parameter
;y                                    IX+15      1   parameter
;x                                    IX+12      1   parameter
;obstacles                             IX+9      3   parameter
;matrix                                IX+6      3   parameter


; Stack Frame Size: 24 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "addObstacleRectangleInMatrix",49,"_addObstacleRectangleInMatrix"
;   50	
;   51	void generateLine(uint8_t matrix[MATRIX_X_LENGTH][MATRIX_Y_LENGTH], t_obstacle *obstacles) {
_generateLine:
.DEFINE "_generateLine"

.VALUE _generateLine

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "generateLine",51,"_generateLine"

.LINE 51

.DEFINE "matrix"

.CLASS 65

.VALUE 6

.DIM 5

.TYPE 812

.ENDEF

.DEFINE "obstacles"

.CLASS 65

.VALUE 9

.TAG "s_obstacle"

.TYPE 40

.ENDEF

.DEFINE "i"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "random_number"

.CLASS 65

.VALUE -5

.TYPE 15

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	DEC	SP
	DEC	SP
;   52	    uint8_t i;
;   53	    uint32_t random_number;
;   54	
;   55	    for (i = 0; i < MATRIX_X_LENGTH; ++i) {
.LINE 55

	LD	(IX+-1),0
	JR	L_30
L_28:
;   56	        random_number = random() % 2;
.LINE 56

	CALL	_random
	LD	BC,HL
	LD	A,C
	AND	A,1
	UEXT	HL
	LD	L,A
	LD	(IX+-5),HL
	LD	(IX+-2),H
;   57	        if (random_number) {
.LINE 57

	LD	HL,(IX+-5)
	LD	E,(IX+-2)
	CALL	__lcmpzero
	JR	Z,L_29
;   58	            addObstacleRectangleInMatrix(matrix, obstacles, i, 0, 10);
.LINE 58

	LD	BC,10
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_addObstacleRectangleInMatrix
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   59	        }
;   60	    }
L_29:
.LINE 60

	INC	(IX+-1)
L_30:
	LD	A,(IX+-1)
	CP	A,5
	JR	C,L_28
;   61	}
.LINE 61

	LD	SP,IX
	POP	IX
	RET	


;**************************** _generateLine ***************************
;Name                         Addr/Register   Size   Type
;_addObstacleRectangleInMatrix       IMPORT  -----   function
;_random                             IMPORT  -----   function
;random_number                         IX-5      4   variable
;i                                     IX-1      1   variable
;obstacles                             IX+9      3   parameter
;matrix                                IX+6      3   parameter


; Stack Frame Size: 17 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "generateLine",61,"_generateLine"
;   62	
;   63	uint8_t mapMoveDown(uint8_t matrix[MATRIX_X_LENGTH][MATRIX_Y_LENGTH], t_obstacle *obstacles) {
_mapMoveDown:
.DEFINE "_mapMoveDown"

.VALUE _mapMoveDown

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "mapMoveDown",63,"_mapMoveDown"

.LINE 63

.DEFINE "matrix"

.CLASS 65

.VALUE 6

.DIM 5

.TYPE 812

.ENDEF

.DEFINE "obstacles"

.CLASS 65

.VALUE 9

.TAG "s_obstacle"

.TYPE 40

.ENDEF

.DEFINE "i"

.CLASS 65

.VALUE -4

.TYPE 12

.ENDEF

.DEFINE "obstacle"

.CLASS 65

.VALUE -7

.TAG "s_obstacle"

.TYPE 40

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-25
	LD	SP,HL
;   64	    uint8_t i;
;   65	    t_obstacle *obstacle;
;   66	
;   67	    obstacle = obstacles;
.LINE 67

	LD	BC,(IX+9)
	LD	(IX+-7),BC
;   68	
;   69	    while (obstacle->next) {
.LINE 69

	JR	L_44
L_45:
;   70	        obstacle = obstacle->next;
.LINE 70

	LD	BC,(IX+-3)
	LD	(IX+-7),BC
;   71	        for (i = 0; i < NUMBER_POINT_OBSTACLE; ++i) {
.LINE 71

	LD	(IX+-4),0
	JR	L_35
L_33:
;   72	            obstacle->point[i].y += OBSTACLE_Y_LENGTH;
.LINE 72

	LD	A,(IX+-4)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	IY,(IX+-3)
	LEA	HL,IY+0
	ADD	HL,BC
	LD	(IX+-10),HL
	LD	A,(IX+-4)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	LEA	BC,IY+0
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+3)
	ADD	A,10
	LD	IY,(IX+-10)
	LD	(IY+3),A
;   73	            if (obstacle->point[i].y >= MATRIX_Y_LENGTH*OBSTACLE_Y_LENGTH + MAP_Y_MARGE) { return FALSE; }
.LINE 73

	LD	A,(IY+3)
	CP	A,60
	JR	C,L_34
	XOR	A,A
	JR	L_47
;   74	        }
L_34:
.LINE 74

	INC	(IX+-4)
L_35:
	LD	A,(IX+-4)
	CP	A,4
	JR	C,L_33
;   75	        if (obstacle->in_matrix) {
.LINE 75

	LD	IY,(IX+-3)
	LD	A,(IY+27)
	OR	A,A
	JR	Z,L_44
;   76	            if (obstacle->matrix.y == 0) { setHiddenObstacle(obstacles, matrix[obstacle->matrix.x][obstacle->matrix.y], NORTH, FALSE); }
.LINE 76

	LD	IY,(IX+-3)
	LD	A,(IY+31)
	OR	A,A
	JR	NZ,L_38
	LD	IY,(IX+-3)
	LEA	BC,IY+28
	LD	(IX+-13),BC
	LD	BC,0
	PUSH	BC
	LD	BC,3
	PUSH	BC
	LD	IY,(IX+-13)
	LD	HL,(IY+0)
	LD	A,5
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IY+3)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_setHiddenObstacle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_38:
;   77	            if (matrix[obstacle->matrix.x][obstacle->matrix.y] == obstacle->id) { matrix[obstacle->matrix.x][obstacle->matrix.y] = 0; }
.LINE 77

	LD	IY,(IX+-3)
	LEA	BC,IY+28
	LD	(IX+-16),BC
	LD	IY,(IX+-16)
	LD	HL,(IY+0)
	LD	A,5
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IY+3)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	LD	IY,(IX+-3)
	CP	A,(IY+20)
	JR	NZ,L_40
	LD	IY,(IX+-3)
	LEA	BC,IY+28
	LD	(IX+-19),BC
	LD	IY,(IX+-19)
	LD	HL,(IY+0)
	LD	A,5
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IY+3)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),0
L_40:
;   78	            (obstacle->matrix.y)++;
.LINE 78

	LD	IY,(IX+-3)
	LEA	BC,IY+28
	LD	(IX+-22),BC
	LD	A,(IY+31)
	INC	A
	LD	IY,(IX+-22)
	LD	(IY+3),A
;   79	            matrix[obstacle->matrix.x][obstacle->matrix.y] = obstacle->id;
.LINE 79

	LD	B,(IY+3)
	LD	HL,(IY+0)
	LD	A,5
	CALL	__imul_b
	LD	DE,(IX+6)
	ADD	HL,DE
	LD	DE,HL
	LD	A,B
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	IY,(IX+-3)
	LD	A,(IY+20)
	LD	(HL),A
;   80	            if (obstacle->matrix.y == MATRIX_Y_LENGTH - 1) { setHiddenObstacle(obstacles, matrix[obstacle->matrix.x][obstacle->matrix.y], SOUTH, TRUE); }
.LINE 80

	LD	A,B
	CP	A,4
	JR	NZ,L_44
	LD	IY,(IX+-3)
	LEA	BC,IY+28
	LD	(IX+-25),BC
	LD	BC,1
	PUSH	BC
	PUSH	BC
	LD	IY,(IX+-25)
	LD	HL,(IY+0)
	LD	A,5
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IY+3)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_setHiddenObstacle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   81	        }
;   82	    }
L_44:
.LINE 82

	LD	IY,(IX+-7)
	LD	BC,(IY+32)
	LD	(IX+-3),BC
	LD	HL,BC
	CALL	__icmpzero
	JR	NZ,L_45
;   83	    return TRUE;
.LINE 83

	LD	A,1
L_47:
.LINE 84

	LD	SP,IX
	POP	IX
	RET	


;**************************** _mapMoveDown ***************************
;Name                         Addr/Register   Size   Type
;obstacle                              IX-7      3   variable
;i                                     IX-4      1   variable
;G_6                                   IX-3      3   variable
;obstacles                             IX+9      3   parameter
;matrix                                IX+6      3   parameter


; Stack Frame Size: 37 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "mapMoveDown",84,"_mapMoveDown"
	XREF _addObstacleRectangle:ROM
	XREF _random:ROM
	XREF __imulu:ROM
	XREF __icmpzero:ROM
	XREF __lcmpzero:ROM
	XREF __imul_b:ROM
	XDEF _mapMoveDown
	XDEF _generateLine
	XDEF _addObstacleRectangleInMatrix
	XDEF _setAdjHiddenObstacle
	XDEF _setHiddenObstacle
	END
