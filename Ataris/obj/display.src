; Zilog eZ80 ANSI C Compiler Release 3.4
; -debug -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\DISPLAY.C"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",6
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "rem"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",8
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 5
.ENDEF
.DEFINE "rem"
.VALUE 4
.CLASS 8
.TYPE 5
.ENDEF
.ENDREC "NONAME1"
.BEGREC "header",6
.DEFINE "s"
.VALUE 0
.CLASS 11
.TAG "NONAME2"
.TYPE 8
.ENDEF
.DEFINE "x"
.VALUE 0
.CLASS 11
.TYPE 2
.ENDEF
.ENDREC "header"
.BEGREC "NONAME2",6
.DEFINE "ptr"
.VALUE 0
.CLASS 8
.TAG "header"
.TYPE 40
.ENDEF
.DEFINE "size"
.VALUE 3
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",3
.DEFINE "width"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME3"
.BEGREC "NONAME4",3
.DEFINE "width"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME4"
.BEGREC "NONAME5",6
.DEFINE "x"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "y"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME5"
.BEGREC "NONAME6",12
.DEFINE "xmin"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "ymin"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "xmax"
.VALUE 6
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "ymax"
.VALUE 9
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME6"
.BEGREC "NONAME7",18
.DEFINE "map"
.VALUE 0
.CLASS 8
.TYPE 44
.ENDEF
.DEFINE "tiles"
.VALUE 3
.CLASS 8
.TAG "NONAME3"
.TYPE 296
.ENDEF
.DEFINE "tile_height"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "tile_width"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "draw_height"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "draw_width"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "type_width"
.VALUE 10
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "type_height"
.VALUE 11
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 12
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "width"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "y_loc"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "x_loc"
.VALUE 15
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME7"
.BEGREC "s_pos",4
.DEFINE "x"
.VALUE 0
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "y"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "s_pos"
.BEGREC "s_precision_pos",8
.DEFINE "x"
.VALUE 0
.CLASS 8
.TYPE 6
.ENDEF
.DEFINE "y"
.VALUE 4
.CLASS 8
.TYPE 6
.ENDEF
.ENDREC "s_precision_pos"
.BEGREC "s_ball",20
.DEFINE "pos"
.VALUE 0
.CLASS 8
.TAG "s_precision_pos"
.TYPE 8
.ENDEF
.DEFINE "old_pos"
.VALUE 8
.CLASS 8
.TAG "s_pos"
.TYPE 8
.ENDEF
.DEFINE "direction"
.VALUE 12
.CLASS 8
.TYPE 6
.ENDEF
.DEFINE "speed"
.VALUE 16
.CLASS 8
.TYPE 6
.ENDEF
.ENDREC "s_ball"
.BEGREC "s_obstacle",35
.DEFINE "point"
.VALUE 0
.CLASS 8
.DIM 4
.TAG "s_pos"
.TYPE 104
.ENDEF
.DEFINE "ortho"
.VALUE 16
.CLASS 8
.DIM 4
.TYPE 108
.ENDEF
.DEFINE "id"
.VALUE 20
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "life"
.VALUE 21
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "hide"
.VALUE 23
.CLASS 8
.DIM 4
.TYPE 108
.ENDEF
.DEFINE "in_matrix"
.VALUE 27
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "matrix"
.VALUE 28
.CLASS 8
.TAG "s_pos"
.TYPE 8
.ENDEF
.DEFINE "next"
.VALUE 32
.CLASS 8
.TAG "s_obstacle"
.TYPE 40
.ENDEF
.ENDREC "s_obstacle"
	SEGMENT DATA
_sprite_ball:
	DB	5
	DB	5
	DB	0
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	1
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	0
.DEFINE "sprite_ball"
.ALIAS "_sprite_ball"
.CLASS 69
.VALUE _sprite_ball
.DIM 27
.TYPE 108
.ENDEF
_sprite_clear_ball:
	DB	5
	DB	5
	DB	0
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	0
.DEFINE "sprite_clear_ball"
.ALIAS "_sprite_clear_ball"
.CLASS 69
.VALUE _sprite_clear_ball
.DIM 27
.TYPE 108
.ENDEF
_gfx_pal:
	DW	32767
	DW	32767
	DW	0
	DW	7399
	DW	19026
.DEFINE "gfx_pal"
.ALIAS "_gfx_pal"
.CLASS 69
.VALUE _gfx_pal
.DIM 5
.TYPE 109
.ENDEF
;    1	
;    2	#include "display.h"
;    3	
;    4	uint8_t sprite_ball[BALL_GFX_SIZE] = {
;    5	        BALL_SIZE,
;    6	        BALL_SIZE,
;    7	        0,2,2,2,0,
;    8	        2,1,2,2,2,
;    9	        2,2,2,2,2,
;   10	        2,2,2,2,2,
;   11	        0,2,2,2,0,
;   12	};
;   13	
;   14	uint8_t sprite_clear_ball[BALL_GFX_SIZE] = {
;   15	        BALL_SIZE,
;   16	        BALL_SIZE,
;   17	        0,1,1,1,0,
;   18	        1,1,1,1,1,
;   19	        1,1,1,1,1,
;   20	        1,1,1,1,1,
;   21	        0,1,1,1,0,
;   22	};
;   23	
;   24	uint16_t gfx_pal[LENGTH_PAL] = {
	SEGMENT CODE
;   25	        gfx_RGBTo1555(255,255,255),   // transparent
;   26	        gfx_RGBTo1555(255,255,255),   // white
;   27	        gfx_RGBTo1555(0,0,0),         // black
;   28	        gfx_RGBTo1555(60,60,60),      // dark_grey
;   29	        gfx_RGBTo1555(150,150,150),   // light_grey
;   30	};
;   31	
;   32	void clearOldBall(t_ball ball) {
_clearOldBall:
.DEFINE "_clearOldBall"

.VALUE _clearOldBall

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "clearOldBall",32,"_clearOldBall"

.LINE 32

.DEFINE "ball"

.CLASS 65

.VALUE 6

.TAG "s_ball"

.TYPE 8

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;   33	    gfx_TransparentSprite_NoClip(
;   34	            SPRITE_CLEAR_BALL,
;   35	            ball.old_pos.x - (BALL_SIZE / 2),
;   36	            ball.old_pos.y - (BALL_SIZE / 2));
.LINE 36

	LEA	BC,IX+14
	LD	(IX+-3),BC
	LD	IY,(IX+-3)
	LD	C,(IY+3)
	DEC	C
	DEC	C
	LD	B,0
	PUSH	BC
	LD	IY,(IY+0)
	LEA	BC,IY+-2
	PUSH	BC
	LD	BC,_sprite_clear_ball
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;   37	}
.LINE 37

	LD	SP,IX
	POP	IX
	RET	


;**************************** _clearOldBall ***************************
;Name                         Addr/Register   Size   Type
;_sprite_clear_ball                  STATIC     27   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;ball                                  IX+6     20   parameter


; Stack Frame Size: 30 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "clearOldBall",37,"_clearOldBall"
;   38	
;   39	void printBall(t_ball ball) {
_printBall:
.DEFINE "_printBall"

.VALUE _printBall

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "printBall",39,"_printBall"

.LINE 39

.DEFINE "ball"

.CLASS 65

.VALUE 6

.TAG "s_ball"

.TYPE 8

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;   40	    gfx_TransparentSprite_NoClip(
;   41	            SPRITE_BALL,
;   42	            (uint24_t)(ball.pos.x - (BALL_SIZE / 2)),
;   43	            (uint8_t)(ball.pos.y - (BALL_SIZE / 2)));
.LINE 43

	LEA	BC,IX+6
	LD	(IX+-3),BC
	OR	A,A
	SBC	HL,HL
	LD	E,64
	LD	IY,(IX+-3)
	LD	BC,(IY+4)
	LD	A,(IY+7)
	CALL	__fsub
	CALL	__ftol
	LD	B,0
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	LD	E,64
	LD	BC,(IY+0)
	LD	A,(IY+3)
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	LD	BC,_sprite_ball
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;   44	}
.LINE 44

	LD	SP,IX
	POP	IX
	RET	


;**************************** _printBall ***************************
;Name                         Addr/Register   Size   Type
;_sprite_ball                        STATIC     27   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;ball                                  IX+6     20   parameter


; Stack Frame Size: 30 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "printBall",44,"_printBall"
;   45	
;   46	void printObstacle(t_obstacle *obstacle) {
_printObstacle:
.DEFINE "_printObstacle"

.VALUE _printObstacle

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "printObstacle",46,"_printObstacle"

.LINE 46

.DEFINE "obstacle"

.CLASS 65

.VALUE 6

.TAG "s_obstacle"

.TYPE 40

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-26
	LD	SP,HL
;   47	    if (obstacle->life < 3) {
.LINE 47

	LD	IY,(IX+6)
	LD	BC,(IY+21)
	LD	(IX+-2),C
	LD	(IX+-1),B
	LD.LIS	BC,3
	LD	HL,(IX+-2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NC,L_5
;   48	        gfx_SetColor(4);
.LINE 48

	LD	BC,4
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   49	    } else if (obstacle->life < 6) {
.LINE 49

	JR	L_6
L_5:
	LD.LIS	BC,6
	LD	HL,(IX+-2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NC,L_3
;   50	        gfx_SetColor(3);
.LINE 50

	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   51	    } else {
.LINE 51

	JR	L_6
L_3:
;   52	        gfx_SetColor(2);
.LINE 52

	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   53	    }
L_6:
.LINE 53

;   54	    gfx_FillRectangle(obstacle->point[0].x + 1, obstacle->point[0].y + 1, obstacle->point[3].x - obstacle->point[0].x - 1, obstacle->point[1].y - obstacle->point[0].y - 1);
.LINE 54

	LD	IY,(IX+6)
	LEA	BC,IY+0
	LD	(IX+-8),BC
	LD	(IX+-5),BC
	LD	IY,(IX+-5)
	LD	BC,(IY+0)
	LD	IY,(IX+-8)
	LD	A,(IY+7)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	IY,(IX+-5)
	LD	A,(IY+3)
	UEXT	HL
	LD	L,A
	LD	(IX+-23),DE	; spill
	LD	(IX+-26),HL	; spill
	LD	HL,(IX+-23)
	OR	A,A
	LD	DE,(IX+-26)	; unspill
	SBC	HL,DE
	DEC	HL
	PUSH	HL
	LD	IY,(IX+-8)
	LD	HL,(IY+12)
	LD	DE,BC
	OR	A,A
	SBC	HL,DE
	DEC	HL
	PUSH	HL
	LD	IY,(IX+-5)
	LD	A,(IY+3)
	UEXT	HL
	LD	L,A
	INC	HL
	PUSH	HL
	INC	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   55	    gfx_SetColor(2);
.LINE 55

	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   56	    gfx_Rectangle(obstacle->point[0].x, obstacle->point[0].y, obstacle->point[3].x - obstacle->point[0].x + 1, obstacle->point[1].y - obstacle->point[0].y + 1);
.LINE 56

	LD	IY,(IX+6)
	LEA	BC,IY+0
	LD	(IX+-14),BC
	LD	(IX+-11),BC
	LD	IY,(IX+-11)
	LD	BC,(IY+0)
	LD	IY,(IX+-14)
	LD	A,(IY+7)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	IY,(IX+-11)
	LD	A,(IY+3)
	UEXT	HL
	LD	L,A
	LD	(IX+-17),DE	; spill
	LD	(IX+-20),HL	; spill
	LD	HL,(IX+-17)
	OR	A,A
	LD	DE,(IX+-20)	; unspill
	SBC	HL,DE
	INC	HL
	PUSH	HL
	LD	IY,(IX+-14)
	LD	HL,(IY+12)
	LD	DE,BC
	OR	A,A
	SBC	HL,DE
	INC	HL
	PUSH	HL
	LD	IY,(IX+-11)
	LD	A,(IY+3)
	UEXT	HL
	LD	L,A
	PUSH	HL
	PUSH	BC
	CALL	_gfx_Rectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   57	    gfx_SetColor(0);
.LINE 57

	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   58	}
.LINE 58

	LD	SP,IX
	POP	IX
	RET	


;**************************** _printObstacle ***************************
;Name                         Addr/Register   Size   Type
;_gfx_Rectangle                      IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;G_0                                   IX-2      2   variable
;obstacle                              IX+6      3   parameter


; Stack Frame Size: 35 (bytes)
;       Spill Code: -2 (instruction)


.ENDFUNC "printObstacle",58,"_printObstacle"
;   59	
;   60	void eraseObstacle(t_obstacle *obstacle) {
_eraseObstacle:
.DEFINE "_eraseObstacle"

.VALUE _eraseObstacle

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "eraseObstacle",60,"_eraseObstacle"

.LINE 60

.DEFINE "obstacle"

.CLASS 65

.VALUE 6

.TAG "s_obstacle"

.TYPE 40

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-12
	LD	SP,HL
;   61	    gfx_SetColor(1);
.LINE 61

	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   62	    gfx_FillRectangle(obstacle->point[0].x, obstacle->point[0].y, obstacle->point[3].x - obstacle->point[0].x + 1, obstacle->point[1].y - obstacle->point[0].y + 1);
.LINE 62

	LD	IY,(IX+6)
	LEA	BC,IY+0
	LD	(IX+-6),BC
	LD	(IX+-3),BC
	LD	IY,(IX+-3)
	LD	BC,(IY+0)
	LD	IY,(IX+-6)
	LD	A,(IY+7)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	IY,(IX+-3)
	LD	A,(IY+3)
	UEXT	HL
	LD	L,A
	LD	(IX+-9),DE	; spill
	LD	(IX+-12),HL	; spill
	LD	HL,(IX+-9)
	OR	A,A
	LD	DE,(IX+-12)	; unspill
	SBC	HL,DE
	INC	HL
	PUSH	HL
	LD	IY,(IX+-6)
	LD	HL,(IY+12)
	LD	DE,BC
	OR	A,A
	SBC	HL,DE
	INC	HL
	PUSH	HL
	LD	IY,(IX+-3)
	LD	A,(IY+3)
	UEXT	HL
	LD	L,A
	PUSH	HL
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   63	    gfx_SetColor(0);
.LINE 63

	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   64	}
.LINE 64

	LD	SP,IX
	POP	IX
	RET	


;**************************** _eraseObstacle ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;obstacle                              IX+6      3   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: -3 (instruction)


.ENDFUNC "eraseObstacle",64,"_eraseObstacle"
;   65	
;   66	void printAllObstacle(t_obstacle *obstacles) {
_printAllObstacle:
.DEFINE "_printAllObstacle"

.VALUE _printAllObstacle

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "printAllObstacle",66,"_printAllObstacle"

.LINE 66

.DEFINE "obstacles"

.CLASS 65

.VALUE 6

.TAG "s_obstacle"

.TYPE 40

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;   67	    while (obstacles->next) {
.LINE 67

	JR	L_9
L_10:
;   68	        obstacles = obstacles->next;
.LINE 68

	LD	BC,(IX+-3)
	LD	(IX+6),BC
;   69	        printObstacle(obstacles);
.LINE 69

	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_printObstacle
	POP	BC
;   70	    }
L_9:
.LINE 70

	LD	IY,(IX+6)
	LD	BC,(IY+32)
	LD	(IX+-3),BC
	LD	HL,BC
	CALL	__icmpzero
	JR	NZ,L_10
;   71	}
.LINE 71

	LD	SP,IX
	POP	IX
	RET	


;**************************** _printAllObstacle ***************************
;Name                         Addr/Register   Size   Type
;_printObstacle                      IMPORT  -----   function
;G_1                                   IX-3      3   variable
;obstacles                             IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: -3 (instruction)


.ENDFUNC "printAllObstacle",71,"_printAllObstacle"
;   72	
;   73	void printMap() {
_printMap:
.DEFINE "_printMap"

.VALUE _printMap

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "printMap",73,"_printMap"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   74	    gfx_SetColor(2);
.LINE 74

	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   75	    gfx_FillRectangle(0, 0, 2*MAP_X_MARGE + MAP_X_LENGTH, MAP_Y_MARGE);
.LINE 75

	LD	BC,10
	PUSH	BC
	LD	BC,70
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   76	    gfx_FillRectangle(0, MAP_Y_MARGE + MAP_Y_LENGTH, 2*MAP_X_MARGE + MAP_X_LENGTH, MAP_Y_MARGE);
.LINE 76

	LD	BC,10
	PUSH	BC
	LD	BC,70
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   77	    gfx_FillRectangle(0, MAP_Y_MARGE, MAP_X_MARGE, MAP_Y_LENGTH);
.LINE 77

	LD	BC,50
	PUSH	BC
	LD	BC,10
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   78	    gfx_FillRectangle(MAP_X_MARGE + MAP_X_LENGTH, MAP_Y_MARGE, MAP_X_MARGE, MAP_Y_LENGTH);
.LINE 78

	LD	BC,50
	PUSH	BC
	LD	BC,10
	PUSH	BC
	PUSH	BC
	LD	BC,60
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   79	    gfx_SetColor(0);
.LINE 79

	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   80	}
.LINE 80

	LD	SP,IX
	POP	IX
	RET	


;**************************** _printMap ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: -3 (instruction)


.ENDFUNC "printMap",80,"_printMap"
;   81	
;   82	void printAll(t_obstacle *obstacles, t_ball ball) {
_printAll:
.DEFINE "_printAll"

.VALUE _printAll

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "printAll",82,"_printAll"

.LINE 82

.DEFINE "obstacles"

.CLASS 65

.VALUE 6

.TAG "s_obstacle"

.TYPE 40

.ENDEF

.DEFINE "ball"

.CLASS 65

.VALUE 9

.TAG "s_ball"

.TYPE 8

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   83	    gfx_FillScreen(1);
.LINE 83

	LD	BC,1
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;   84	    printMap();
.LINE 84

	CALL	_printMap
;   85	    printAllObstacle(obstacles);
.LINE 85

	LD	BC,(IX+6)
	PUSH	BC
	CALL	_printAllObstacle
	POP	BC
;   86	    printBall(ball);
.LINE 86

	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-21
	LD	SP,IY
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+9
	LD	BC,20
	LDIR	
	CALL	_printBall
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
.LINE 87

	LD	SP,IX
	POP	IX
	RET	


;**************************** _printAll ***************************
;Name                         Addr/Register   Size   Type
;_printBall                          IMPORT  -----   function
;_printAllObstacle                   IMPORT  -----   function
;_printMap                           IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;ball                                  IX+9     20   parameter
;obstacles                             IX+6      3   parameter


; Stack Frame Size: 30 (bytes)
;       Spill Code: -3 (instruction)


.ENDFUNC "printAll",87,"_printAll"
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_Rectangle:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetColor:ROM
	XREF __fsub:ROM
	XREF __ftol:ROM
	XREF __icmpzero:ROM
	XDEF _printAll
	XDEF _printMap
	XDEF _printAllObstacle
	XDEF _eraseObstacle
	XDEF _printObstacle
	XDEF _printBall
	XDEF _clearOldBall
	XDEF _gfx_pal
	XDEF _sprite_clear_ball
	XDEF _sprite_ball
	END
