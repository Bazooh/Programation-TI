; Zilog eZ80 ANSI C Compiler Release 3.4
; -debug -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\ITOA.C"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",6
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "rem"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",8
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 5
.ENDEF
.DEFINE "rem"
.VALUE 4
.CLASS 8
.TYPE 5
.ENDEF
.ENDREC "NONAME1"
.BEGREC "header",6
.DEFINE "s"
.VALUE 0
.CLASS 11
.TAG "NONAME2"
.TYPE 8
.ENDEF
.DEFINE "x"
.VALUE 0
.CLASS 11
.TYPE 2
.ENDEF
.ENDREC "header"
.BEGREC "NONAME2",6
.DEFINE "ptr"
.VALUE 0
.CLASS 8
.TAG "header"
.TYPE 40
.ENDEF
.DEFINE "size"
.VALUE 3
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME2"
;    1	
;    2	#include "itoa.h"
;    3	
;    4	void swap(char *x, char *y) {
_swap:
.DEFINE "_swap"

.VALUE _swap

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "swap",4,"_swap"

.LINE 4

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 34

.ENDEF

.DEFINE "t"

.CLASS 65

.VALUE -1

.TYPE 2

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
;    5	    char t;
;    6	    t = *x;
.LINE 6

	LD	HL,(IX+6)
	LD	A,(HL)
	LD	(IX+-1),A
;    7	    *x = *y;
.LINE 7

	LD	IY,(IX+9)
	LD	HL,(IX+6)
	LD	A,(IY)
	LD	(HL),A
;    8	    *y = t;
.LINE 8

	LD	HL,(IX+9)
	LD	A,(IX+-1)
	LD	(HL),A
;    9	}
.LINE 9

	LD	SP,IX
	POP	IX
	RET	


;**************************** _swap ***************************
;Name                         Addr/Register   Size   Type
;t                                     IX-1      1   variable
;y                                     IX+9      3   parameter
;x                                     IX+6      3   parameter


; Stack Frame Size: 13 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "swap",9,"_swap"
;   10	
;   11	char* reverse(char *buffer, int i, int j)
;   12	{
_reverse:
.DEFINE "_reverse"

.VALUE _reverse

.CLASS 2

.TYPE 322

.ENDEF

.BEGFUNC "reverse",12,"_reverse"

.LINE 12

.DEFINE "buffer"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "i"

.CLASS 65

.VALUE 9

.TYPE 4

.ENDEF

.DEFINE "j"

.CLASS 65

.VALUE 12

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   13	    while (i < j)
.LINE 13

	JR	L_3
L_4:
;   14	        swap(&buffer[i++], &buffer[j--]);
.LINE 14

	LD	DE,(IX+9)
	LD	BC,(IX+12)
	LD	HL,(IX+9)
	INC	HL
	LD	(IX+9),HL
	LD	HL,(IX+12)
	DEC	HL
	LD	(IX+12),HL
	LD	HL,(IX+6)
	ADD	HL,BC
	PUSH	HL
	LD	BC,DE
	LD	HL,(IX+6)
	ADD	HL,BC
	PUSH	HL
	CALL	_swap
	POP	BC
	POP	BC
L_3:
	LD	BC,(IX+12)
	LD	HL,(IX+9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_4
;   15	
;   16	    return buffer;
.LINE 16

	LD	HL,(IX+6)
;   17	}
.LINE 17

	LD	SP,IX
	POP	IX
	RET	


;**************************** _reverse ***************************
;Name                         Addr/Register   Size   Type
;j                                    IX+12      3   parameter
;i                                     IX+9      3   parameter
;buffer                                IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "reverse",17,"_reverse"
;   18	
;   19	char* itoa(int value, char* buffer, int base)
;   20	{
_itoa:
.DEFINE "_itoa"

.VALUE _itoa

.CLASS 2

.TYPE 322

.ENDEF

.BEGFUNC "itoa",20,"_itoa"

.LINE 20

.DEFINE "value"

.CLASS 65

.VALUE 6

.TYPE 4

.ENDEF

.DEFINE "buffer"

.CLASS 65

.VALUE 9

.TYPE 34

.ENDEF

.DEFINE "base"

.CLASS 65

.VALUE 12

.TYPE 4

.ENDEF

.DEFINE "i"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "n"

.CLASS 65

.VALUE -6

.TYPE 4

.ENDEF

.DEFINE "r"

.CLASS 65

.VALUE -9

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
	PUSH	BC
;   21	    int n;
;   22	    int i;
;   23	    if (base < 2 || base > 32)
.LINE 23

	LD	BC,2
	LD	HL,(IX+12)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_8
	LD	BC,(IX+12)
	LD	HL,32
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_9
L_8:
;   24	        return buffer;
.LINE 24

	LD	HL,(IX+9)
	JR	L_25
L_9:
;   25	
;   26	    n = abs(value);
.LINE 26

	LD	BC,(IX+6)
	PUSH	BC
	CALL	_abs
	POP	BC
	LD	(IX+-6),HL
;   27	
;   28	    i = 0;
.LINE 28

	LD	BC,0
	LD	(IX+-3),BC
;   29	    while (n)
.LINE 29

	JR	L_15
L_16:
;   30	    {
;   31	        int r = n % base;
.LINE 31

	LD	HL,(IX+-6)
	LD	BC,(IX+12)
	CALL	__irems
	LD	(IX+-9),HL
;   32	
;   33	        if (r >= 10)
.LINE 33

	LD	BC,10
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_13
;   34	            buffer[i++] = 65 + (r - 10);
.LINE 34

	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	A,(IX+-9)
	ADD	A,55
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;   35	        else
.LINE 35

	JR	L_14
L_13:
;   36	            buffer[i++] = 48 + r;
.LINE 36

	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	A,(IX+-9)
	ADD	A,48
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_14:
;   37	
;   38	        n = n / base;
.LINE 38

	LD	HL,(IX+-6)
	LD	BC,(IX+12)
	CALL	__idivs
	LD	(IX+-6),HL
;   39	    }
L_15:
.LINE 39

	LD	HL,(IX+-6)
	CALL	__icmpzero
	JR	NZ,L_16
;   40	
;   41	    if (i == 0)
.LINE 41

	LD	HL,(IX+-3)
	CALL	__icmpzero
	JR	NZ,L_23
;   42	        buffer[i++] = '0';
.LINE 42

	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	(HL),48
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_23:
;   43	
;   44	    if (value < 0 && base == 10)
.LINE 44

	LD	HL,(IX+6)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_24
	LD	BC,10
	LD	HL,(IX+12)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_24
;   45	        buffer[i++] = '-';
.LINE 45

	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	(HL),45
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_24:
;   46	
;   47	    buffer[i] = '\0';
.LINE 47

	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	(HL),0
;   48	
;   49	    return reverse(buffer, 0, i - 1);
.LINE 49

	LD	BC,(IX+-3)
	DEC	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_reverse
	POP	BC
	POP	BC
	POP	BC
;   50	}
L_25:
.LINE 50

	LD	SP,IX
	POP	IX
	RET	


;**************************** _itoa ***************************
;Name                         Addr/Register   Size   Type
;_abs                                IMPORT  -----   function
;r                                     IX-9      3   variable
;n                                     IX-6      3   variable
;i                                     IX-3      3   variable
;base                                 IX+12      3   parameter
;buffer                                IX+9      3   parameter
;value                                 IX+6      3   parameter


; Stack Frame Size: 24 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "itoa",50,"_itoa"
	XREF _abs:ROM
	XREF __idivs:ROM
	XREF __irems:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XDEF _itoa
	XDEF _reverse
	XDEF _swap
	END
