; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\DECK.C"
	.assume ADL=1
	SEGMENT CODE
;    1	
;    2	#include "deck.h"
;    3	
;    4	void removeDeckCard(t_deck *deck, uint8_t elem_place) {
_removeDeckCard:
	LD	HL,-7
	CALL	__frameset
;    5	    uint8_t i;
;    6	    t_deck *card_to_free;
;    7	
;    8	    if (elem_place < 1) { return; }
	LD	A,(IX+9)
	CP	A,1
	JR	C,L_9
;    9	
;   10	    for (i = 0; i < elem_place - 1; i++) {
	LD	(IX+-1),0
	JR	L_6
L_4:
;   11	        if (!deck->next) { return; }
	LD	IY,(IX+6)
	LD	BC,(IY+2)
	LD	(IX+-4),BC
	LD	HL,BC
	CALL	__icmpzero
	JR	Z,L_9
;   12	        deck = deck->next;
	LD	BC,(IX+-4)
	LD	(IX+6),BC
	INC	(IX+-1)
;   13	    }
L_6:
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	DEC	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_4
;   14	
;   15	    card_to_free = deck->next;
	LD	IY,(IX+6)
	LD	BC,(IY+2)
	LD	(IX+-7),BC
;   16	    deck->next = card_to_free->next;
	LD	IY,(IX+-7)
	LD	BC,(IY+2)
	LD	IY,(IX+6)
	LD	(IY+2),BC
;   17	    free(card_to_free);
	LD	BC,(IX+-7)
	PUSH	BC
	CALL	_free
	POP	BC
;   18	}
L_9:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _removeDeckCard ***************************
;Name                         Addr/Register   Size   Type
;_free                               IMPORT  -----   function
;card_to_free                          IX-7      3   variable
;G_0                                   IX-4      3   variable
;i                                     IX-1      1   variable
;elem_place                            IX+9      1   parameter
;deck                                  IX+6      3   parameter


; Stack Frame Size: 19 (bytes)
;       Spill Code: 0 (instruction)


;   19	
;   20	void freeDeck(t_deck *deck) {
_freeDeck:
	LD	HL,-3
	CALL	__frameset
;   21	    t_deck *card_to_free;
;   22	
;   23	    deck = deck->next;
	LD	IY,(IX+6)
	LD	BC,(IY+2)
	LD	(IX+6),BC
;   24	
;   25	    while (deck->next) {
	JR	L_10
L_11:
;   26	        card_to_free = deck;
	LD	BC,(IX+6)
	LD	(IX+-3),BC
;   27	        deck = deck->next;
	LD	IY,(IX+6)
	LD	BC,(IY+2)
	LD	(IX+6),BC
;   28	        free(card_to_free);
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_free
	POP	BC
;   29	    }
L_10:
	LD	IY,(IX+6)
	LD	HL,(IY+2)
	CALL	__icmpzero
	JR	NZ,L_11
;   30	    free(deck);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_free
	POP	BC
;   31	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _freeDeck ***************************
;Name                         Addr/Register   Size   Type
;_free                               IMPORT  -----   function
;card_to_free                          IX-3      3   variable
;deck                                  IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;   32	
;   33	void initCard(t_card *card, uint8_t color, uint8_t value) {
_initCard:
	CALL	__frameset0
;   34	    card->color = color;
	LD	A,(IX+9)
	LD	IY,(IX+6)
	LD	(IY+1),A
;   35	    card->value = value;
	LD	A,(IX+12)
	LD	(IY+0),A
;   36	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _initCard ***************************
;Name                         Addr/Register   Size   Type
;value                                IX+12      1   parameter
;color                                 IX+9      1   parameter
;card                                  IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


;   37	
;   38	t_deck *createCard(uint8_t color, uint8_t value) {
_createCard:
	LD	HL,-3
	CALL	__frameset
;   39	    t_deck *new_elem;
;   40	
;   41	    if (!(new_elem = malloc(sizeof(t_deck)))) { return NULL; }
	LD	BC,5
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(IX+-3),HL
	CALL	__icmpzero
	JR	NZ,L_16
	OR	A,A
	SBC	HL,HL
	JR	L_17
L_16:
;   42	
;   43	    initCard(&new_elem->card, color, value);
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	LD	IY,(IX+-3)
	PEA	IY+0
	CALL	_initCard
	POP	BC
	POP	BC
	POP	BC
;   44	    new_elem->next = NULL;
	LD	IY,(IX+-3)
	LD	BC,0
	LD	(IY+2),BC
;   45	
;   46	    return new_elem;
	LD	HL,(IX+-3)
;   47	}
L_17:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _createCard ***************************
;Name                         Addr/Register   Size   Type
;_initCard                           IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;new_elem                              IX-3      3   variable
;value                                 IX+9      1   parameter
;color                                 IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


;   48	
;   49	void initDeck(t_deck *deck) {
_initDeck:
	LD	HL,-5
	CALL	__frameset
;   50	    uint8_t color;
;   51	    uint8_t value;
;   52	
;   53	    for (color = 1; color <= NUMBER_OF_COLOR; color++) {
	LD	(IX+-1),1
	JR	L_27
L_25:
;   54	        for (value = 1; value <= NUMBER_OF_VALUE; value++) {
	LD	(IX+-2),1
	JR	L_24
L_22:
;   55	            if (!(deck->next = createCard(color, value))) { return; }
	LD	C,(IX+-2)
	LD	B,0
	PUSH	BC
	LD	C,(IX+-1)
	PUSH	BC
	CALL	_createCard
	POP	BC
	POP	BC
	LD	IY,(IX+6)
	LD	(IY+2),HL
	LD	BC,(IY+2)
	LD	(IX+-5),BC
	LD	HL,BC
	CALL	__icmpzero
	JR	Z,L_28
;   56	            deck = deck->next;
	LD	BC,(IX+-5)
	LD	(IX+6),BC
	INC	(IX+-2)
;   57	        }
L_24:
	LD	A,13
	CP	A,(IX+-2)
	JR	NC,L_22
	INC	(IX+-1)
;   58	    }
L_27:
	LD	A,4
	CP	A,(IX+-1)
	JR	NC,L_25
;   59	}
L_28:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _initDeck ***************************
;Name                         Addr/Register   Size   Type
;G_1                                   IX-5      3   variable
;value                                 IX-2      1   variable
;color                                 IX-1      1   variable
;deck                                  IX+6      3   parameter


; Stack Frame Size: 14 (bytes)
;       Spill Code: 0 (instruction)


;   60	
;   61	uint8_t sizeOfDeck(t_deck *list) {
_sizeOfDeck:
	LD	HL,-4
	CALL	__frameset
;   62	    uint8_t i;
;   63	
;   64	    i = 0;
	LD	(IX+-1),0
;   65	
;   66	    while (list->next) {
	JR	L_30
L_31:
;   67	        list = list->next;
	LD	BC,(IX+-4)
	LD	(IX+6),BC
;   68	        i++;
	INC	(IX+-1)
;   69	    }
L_30:
	LD	IY,(IX+6)
	LD	BC,(IY+2)
	LD	(IX+-4),BC
	LD	HL,BC
	CALL	__icmpzero
	JR	NZ,L_31
;   70	    return i;
	LD	A,(IX+-1)
	LD	SP,IX
	POP	IX
	RET	


;**************************** _sizeOfDeck ***************************
;Name                         Addr/Register   Size   Type
;G_2                                   IX-4      3   variable
;i                                     IX-1      1   variable
;list                                  IX+6      3   parameter


; Stack Frame Size: 13 (bytes)
;       Spill Code: 0 (instruction)


	XREF _free:ROM
	XREF _malloc:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XDEF _sizeOfDeck
	XDEF _initDeck
	XDEF _createCard
	XDEF _initCard
	XDEF _freeDeck
	XDEF _removeDeckCard
	END
