; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\LOGIC.C"
	.assume ADL=1
	SEGMENT DATA
_DIRECTIONS:
	DB	255
	DB	255
	DB	255
	DB	0
	DB	255
	DB	1
	DB	0
	DB	255
	DB	0
	DB	1
	DB	1
	DB	255
	DB	1
	DB	0
	DB	1
	DB	1
_LINE_DIRECTIONS_X:
	DB	0
	DB	255
	DB	0
	DB	1
_LINE_DIRECTIONS_Y:
	DB	255
	DB	0
	DB	1
	DB	0
;    1	
;    2	#include "minesweeper.h"
;    3	
;    4	t_pos DIRECTIONS[MAX_DIRECTIONS] = {
;    5	        {-1, -1},
;    6	        {-1, 0},
;    7	        {-1, 1},
;    8	        {0, -1},
;    9	        {0, 1},
;   10	        {1, -1},
;   11	        {1, 0},
;   12	        {1, 1},
;   13	};
;   14	
;   15	int8_t LINE_DIRECTIONS_X[NUMBER_OF_SIDES_OF_A_SQUARE] = {
;   16	        0,
;   17	        -1,
;   18	        0,
;   19	        1,
;   20	};
;   21	
;   22	int8_t LINE_DIRECTIONS_Y[NUMBER_OF_SIDES_OF_A_SQUARE] = {
	SEGMENT CODE
;   23	        -1,
;   24	        0,
;   25	        1,
;   26	        0,
;   27	};
;   28	
;   29	int8_t maxABCD(int8_t a, int8_t b, int8_t c, int8_t d) {
_maxABCD:
	CALL	__frameset0
;   30	    if (a >= b && a >= c && a >= d)
	LD	A,(IX+6)
	CP	A,(IX+9)
	CALL	__setflag
	JP	M,L_6
	LD	A,(IX+6)
	CP	A,(IX+12)
	CALL	__setflag
	JP	M,L_6
	LD	A,(IX+6)
	CP	A,(IX+15)
	CALL	__setflag
	JP	M,L_6
;   31	        return a;
	LD	A,(IX+6)
	JR	L_12
L_6:
;   32	    if (b >= a && b >= c && b >= d)
	LD	A,(IX+9)
	CP	A,(IX+6)
	CALL	__setflag
	JP	M,L_10
	LD	A,(IX+9)
	CP	A,(IX+12)
	CALL	__setflag
	JP	M,L_10
	LD	A,(IX+9)
	CP	A,(IX+15)
	CALL	__setflag
	JP	M,L_10
;   33	        return b;
	LD	A,(IX+9)
	JR	L_12
L_10:
;   34	    if (c >= a && c >= b && c >= d)
	LD	A,(IX+12)
	CP	A,(IX+6)
	CALL	__setflag
	JP	M,L_11
	LD	A,(IX+12)
	CP	A,(IX+9)
	CALL	__setflag
	JP	M,L_11
	LD	A,(IX+12)
	CP	A,(IX+15)
	CALL	__setflag
	JP	M,L_11
;   35	        return c;
	LD	A,(IX+12)
	JR	L_12
L_11:
;   36	    return d;
	LD	A,(IX+15)
;   37	}
L_12:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _maxABCD ***************************
;Name                         Addr/Register   Size   Type
;d                                    IX+15      1   parameter
;c                                    IX+12      1   parameter
;b                                     IX+9      1   parameter
;a                                     IX+6      1   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


;   38	
;   39	uint8_t checkInnerMap(t_pos direction) {
_checkInnerMap:
	CALL	__frameset0
;   40	    if (direction.x < 0 || direction.x >= MAP_X_MAX)
	LD	A,(IX+6)
	OR	A,A
	JP	M,L_14
	LD	A,(IX+6)
	CP	A,31
	CALL	__setflag
	JP	M,L_17
L_14:
;   41	        return false;
	XOR	A,A
	JR	L_19
L_17:
;   42	    if (direction.y < 0 || direction.y >= MAP_Y_MAX)
	LD	A,(IX+7)
	OR	A,A
	JP	M,L_16
	LD	A,(IX+7)
	CP	A,21
	CALL	__setflag
	JP	M,L_18
L_16:
;   43	        return false;
	XOR	A,A
	JR	L_19
L_18:
;   44	    return true;
	LD	A,1
;   45	}
L_19:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _checkInnerMap ***************************
;Name                         Addr/Register   Size   Type
;direction                             IX+6      2   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;   46	
;   47	void putBomb(t_case matrix[MAP_X_MAX][MAP_Y_MAX], uint8_t x, uint8_t y) {
_putBomb:
	LD	HL,-30
	CALL	__frameset
;   48	    uint8_t i;
;   49	    t_pos direction;
;   50	
;   51	    matrix[x][y].bomb = true;
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,63
	CALL	__imul_b
	LD	A,(IX+12)
	LD	DE,(IX+6)
	ADD	HL,DE
	LD	DE,HL
	UEXT	HL
	LD	L,A
	LD	(IX+-24),DE	; spill
	LD	(IX+-27),HL	; spill
	LD	DE,(IX+-24)	; unspill
	ADD	HL,HL
	LD	(IX+-24),DE	; spill
	LD	DE,(IX+-27)	; unspill
	ADD	HL,DE
	LD	DE,(IX+-24)	; unspill
	ADD	HL,DE
	LD	IY,HL
	LEA	HL,IY+2
	SET	5,(HL)
;   52	    for(i = 0; i < MAX_DIRECTIONS; i++) {
	LD	(IX+-3),0
	JR	L_26
L_24:
;   53	        direction.x = x + DIRECTIONS[i].x;
	LD	A,(IX+-3)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	DE,_DIRECTIONS
	ADD	HL,DE
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	ADD	A,(IX+9)
	LD	(IX+-2),A
;   54	        direction.y = y + DIRECTIONS[i].y;
	LD	A,(IY+1)
	ADD	A,(IX+12)
	LD	(IX+-1),A
;   55	        if (checkInnerMap(direction) && !matrix[direction.x][direction.y].bomb)
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+-2
	LD	BC,2
	LDIR	
	LD	(IX+-30),BC
	CALL	_checkInnerMap
	LD	BC,(IX+-30)
	POP	DE
	OR	A,A
	JR	Z,L_25
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	A,63
	CALL	__imul_b
	LD	DE,(IX+6)
	ADD	HL,DE
	LD	DE,HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	(IX+-18),BC	; spill
	LD	(IX+-21),HL	; spill
	LD	BC,(IX+-18)	; unspill
	ADD	HL,HL
	LD	(IX+-18),BC	; spill
	LD	BC,(IX+-21)	; unspill
	ADD	HL,BC
	LD	BC,(IX+-18)	; unspill
	ADD	HL,DE
	LD	IY,HL
	LD	HL,(IY+0)
	ADD	HL,HL
	ADD	HL,HL
	LD	A,23
	CALL	__ishru_b
	LD	A,L
	OR	A,A
	JR	NZ,L_25
;   56	            matrix[direction.x][direction.y].value++;
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	A,63
	CALL	__imul_b
	LD	A,(IX+-1)
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	DE,HL
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,HL
	LD	A,20
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,DE
	LD	IY,HL
	LD	HL,(IY+0)
	ADD	HL,HL
	LD	DE,(IX+6)
	ADD	HL,HL
	ADD	HL,HL
	CALL	__ishru_b
	LD	B,L
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	A,63
	CALL	__imul_b
	ADD	HL,DE
	LD	(IX+-12),HL	; spill
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,(IX+-12)	; unspill
	ADD	HL,DE
	LD	DE,HL
	LD	IY,DE
	INC	B
	LD	A,B
	UEXT	HL
	LD	L,A
	LD	A,17
	LD	(IX+-15),HL
	LD	HL,(IY+0)
	LD	IY,DE
	LD	BC,14811135
	CALL	__iand
	LD	DE,HL
	LD	HL,(IX+-15)
	CALL	__ishl_b
	LD	BC,1966080
	CALL	__iand
	LD	BC,HL
	LD	HL,DE
	CALL	__ior
	LD	(IY+0),HL
;   57	    }
L_25:
	INC	(IX+-3)
L_26:
	LD	A,(IX+-3)
	CP	A,8
	JR	C,L_24
;   58	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _putBomb ***************************
;Name                         Addr/Register   Size   Type
;_DIRECTIONS                         STATIC     16   variable
;i                                     IX-3      1   variable
;direction                             IX-2      2   variable
;y                                    IX+12      1   parameter
;x                                     IX+9      1   parameter
;matrix                                IX+6      3   parameter


; Stack Frame Size: 45 (bytes)
;       Spill Code: 0 (instruction)


;   59	
;   60	void mapGenerator(t_case matrix[MAP_X_MAX][MAP_Y_MAX], uint16_t number_of_bomb) {
_mapGenerator:
	LD	HL,-8
	CALL	__frameset
;   61	    uint16_t i;
;   62	    uint32_t random_number;
;   63	    uint8_t x;
;   64	    uint8_t y;
;   65	
;   66	    srandom(rtc_Time());
	LD	A,(15925319)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(15925316)
	PUSH	BC
	CALL	_srandom
	POP	BC
	POP	BC
;   67	
;   68	    for (i = 0; i < number_of_bomb; i++) {
	LD	(IX+-2),0
	LD	(IX+-1),0
	JR	L_34
;   69	        do {
L_29:
;   70	            random_number = random();
	CALL	_random
	LD	(IX+-8),HL
	LD	(IX+-5),E
;   71	            x = (random_number >> 0x10) % MAP_X_MAX;
	LD	BC,HL
	LD	L,16
	LD	A,(IX+-5)
	CALL	__lshru
	LD	E,A
	LD	HL,BC
	LD	BC,31
	XOR	A,A
	CALL	__lremu
	LD	BC,HL
	LD	(IX+-3),C
;   72	            y = (random_number & 0x0000FFFF) % MAP_Y_MAX;
	LD	BC,(IX+-8)
	CALL	__stoiu
	LD	BC,21
	LD	E,0
	XOR	A,A
	CALL	__lremu
	LD	BC,HL
	LD	(IX+-4),C
;   73	        } while (matrix[x][y].bomb);
	LD	A,(IX+-3)
	UEXT	HL
	LD	L,A
	LD	A,63
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	DE,HL
	LD	A,(IX+-4)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,DE
	LD	IY,HL
	LD	HL,(IY+0)
	ADD	HL,HL
	ADD	HL,HL
	LD	A,23
	CALL	__ishru_b
	LD	A,L
	OR	A,A
	JR	NZ,L_29
;   74	        putBomb(matrix, x, y);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	C,(IX+-3)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_putBomb
	POP	BC
	POP	BC
	POP	BC
	LD	HL,(IX+-2)
	INC	HL
	LD	(IX+-2),L
	LD	(IX+-1),H
;   75	    }
L_34:
	LD	BC,(IX+9)
	LD	HL,(IX+-2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_29
;   76	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _mapGenerator ***************************
;Name                         Addr/Register   Size   Type
;_random                             IMPORT  -----   function
;_srandom                            IMPORT  -----   function
;random_number                         IX-8      4   variable
;y                                     IX-4      1   variable
;x                                     IX-3      1   variable
;i                                     IX-2      2   variable
;number_of_bomb                        IX+9      2   parameter
;matrix                                IX+6      3   parameter


; Stack Frame Size: 20 (bytes)
;       Spill Code: 0 (instruction)


;   77	
;   78	void initCursor(t_pos *cursor) {
_initCursor:
	CALL	__frameset0
;   79	    cursor->x = 0;
	LD	IY,(IX+6)
	LD	(IY+0),0
;   80	    cursor->y = 0;
	LD	(IY+1),0
;   81	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _initCursor ***************************
;Name                         Addr/Register   Size   Type
;cursor                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;   82	
;   83	void initMatrix(t_case matrix[MAP_X_MAX][MAP_Y_MAX]) {
_initMatrix:
	LD	HL,-2
	CALL	__frameset
;   84	    uint8_t i;
;   85	    uint8_t j;
;   86	    for(j = 0; j < MAP_Y_MAX; j++) {
	LD	(IX+-2),0
	JR	L_44
L_42:
;   87	        for(i = 0; i < MAP_X_MAX; i++) {
	LD	(IX+-1),0
	JR	L_41
L_39:
;   88	            matrix[i][j].visible = false;
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,63
	CALL	__imul_b
	LD	A,(IX+-2)
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	DE,HL
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,DE
	LD	IY,HL
	LEA	HL,IY+2
	RES	7,(HL)
;   89	            matrix[i][j].flag = false;
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,63
	CALL	__imul_b
	LD	A,(IX+-2)
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	DE,HL
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,DE
	LD	IY,HL
	LEA	HL,IY+2
	RES	6,(HL)
;   90	            matrix[i][j].bomb = false;
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,63
	CALL	__imul_b
	LD	A,(IX+-2)
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	DE,HL
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,DE
	LD	IY,HL
	LEA	HL,IY+2
	RES	5,(HL)
;   91	            matrix[i][j].value = 0;
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,63
	CALL	__imul_b
	LD	A,(IX+-2)
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	DE,HL
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,DE
	LD	BC,HL
	LD	IY,BC
	LD	HL,(IY+0)
	LD	IY,BC
	LD	BC,14811135
	CALL	__iand
	LD	(IY+0),HL
	INC	(IX+-1)
;   92	        }
L_41:
	LD	A,(IX+-1)
	CP	A,31
	JR	C,L_39
	INC	(IX+-2)
;   93	    }
L_44:
	LD	A,(IX+-2)
	CP	A,21
	JR	C,L_42
;   94	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _initMatrix ***************************
;Name                         Addr/Register   Size   Type
;j                                     IX-2      1   variable
;i                                     IX-1      1   variable
;matrix                                IX+6      3   parameter


; Stack Frame Size: 11 (bytes)
;       Spill Code: 0 (instruction)


;   95	
;   96	uint8_t checkNullCase(t_case matrix[MAP_X_MAX][MAP_Y_MAX], t_pos direction) {
_checkNullCase:
	LD	HL,-3
	CALL	__frameset
;   97	    t_case value = matrix[direction.x][direction.y];
	LD	A,(IX+9)
	SEXT	HL
	LD	L,(IX+9)
	LD	A,63
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	DE,HL
	LD	A,(IX+10)
	SEXT	HL
	LD	L,(IX+10)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,DE
	LEA	DE,IX+-3
	LD	BC,3
	LDIR	
;   98	    if (value.visible || value.value || value.bomb)
	LD	HL,(IX+-3)
	LD	A,23
	CALL	__ishru_b
	LD	A,L
	OR	A,A
	JR	NZ,L_48
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	A,20
	CALL	__ishru_b
	LD	A,L
	OR	A,A
	JR	NZ,L_48
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	LD	A,23
	CALL	__ishru_b
	LD	A,L
	OR	A,A
	JR	Z,L_49
L_48:
;   99	        return false;
	XOR	A,A
	JR	L_50
L_49:
;  100	    return true;
	LD	A,1
;  101	}
L_50:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _checkNullCase ***************************
;Name                         Addr/Register   Size   Type
;value                                 IX-3      3   variable
;direction                             IX+9      2   parameter
;matrix                                IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


;  102	
;  103	void discoverBombInLine(t_case matrix[MAP_X_MAX][MAP_Y_MAX], t_pos *case_check, int8_t line_length, t_pos direction) {
_discoverBombInLine:
	LD	HL,-10
	CALL	__frameset
;  104	    uint8_t i;
;  105	
;  106	    for(i = 0; i < line_length; i++) {
	LD	(IX+-1),0
	JR	L_56
L_54:
;  107	        case_check->x = case_check->x + direction.x;
	LD	A,(IX+15)
	LD	IY,(IX+9)
	ADD	A,(IY+0)
	LD	(IY+0),A
;  108	        case_check->y = case_check->y + direction.y;
	LD	A,(IX+16)
	ADD	A,(IY+1)
	LD	(IY+1),A
;  109	
;  110	        if (matrix[case_check->x][case_check->y].bomb) {
	LD	A,(IY+0)
	LD	D,A
	SEXT	HL
	LD	L,D
	LD	A,63
	CALL	__imul_b
	LD	DE,(IX+6)
	ADD	HL,DE
	LD	A,(IY+1)
	LD	D,A
	LD	(IX+-4),BC	; spill
	LD	(IX+-7),HL	; spill
	LD	BC,(IX+-4)	; unspill
	SEXT	HL
	LD	L,D
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	(IX+-4),BC	; spill
	LD	BC,(IX+-7)	; unspill
	ADD	HL,BC
	LD	BC,(IX+-4)	; unspill
	LD	IY,HL
	LD	HL,(IY+0)
	ADD	HL,HL
	ADD	HL,HL
	LD	A,23
	CALL	__ishru_b
	LD	A,L
	OR	A,A
	JR	Z,L_55
;  111	            if (checkInnerMap(*case_check)) {
	LD	HL,(IX+9)
	PUSH	BC
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LD	BC,2
	LDIR	
	LD	(IX+-10),BC
	CALL	_checkInnerMap
	LD	BC,(IX+-10)
	POP	DE
	OR	A,A
	JR	Z,L_55
;  112	                matrix[case_check->x][case_check->y].visible = true;
	LD	IY,(IX+9)
	LD	A,(IY+0)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	A,63
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	A,(IY+1)
	LD	B,A
	LD	DE,HL
	SEXT	HL
	LD	L,B
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,DE
	LD	IY,HL
	LEA	HL,IY+2
	SET	7,(HL)
;  113	                matrix[case_check->x][case_check->y].flag = false;
	LD	IY,(IX+9)
	LD	A,(IY+0)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	A,63
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	A,(IY+1)
	LD	B,A
	LD	DE,HL
	SEXT	HL
	LD	L,B
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,DE
	LD	IY,HL
	LEA	HL,IY+2
	RES	6,(HL)
;  114	                printCase(matrix, case_check->x, case_check->y);
	LD	IY,(IX+9)
	LD	C,(IY+1)
	LD	B,0
	PUSH	BC
	LD	C,(IY+0)
	PUSH	BC
	LD	DE,(IX+6)
	PUSH	DE
	LD	(IX+-10),BC
	CALL	_printCase
	LD	BC,(IX+-10)
	POP	DE
	POP	DE
	POP	DE
;  115	                delay(10);
	LD	DE,10
	PUSH	DE
	LD	(IX+-10),BC
	CALL	_delay
	LD	BC,(IX+-10)
	POP	DE
;  116	            }
;  117	        }
;  118	    }
L_55:
	INC	(IX+-1)
L_56:
	LD	A,(IX+-1)
	CP	A,(IX+12)
	JR	C,L_54
;  119	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _discoverBombInLine ***************************
;Name                         Addr/Register   Size   Type
;_delay                              IMPORT  -----   function
;_printCase                          IMPORT  -----   function
;i                                     IX-1      1   variable
;direction                            IX+15      2   parameter
;line_length                          IX+12      1   parameter
;case_check                            IX+9      3   parameter
;matrix                                IX+6      3   parameter


; Stack Frame Size: 28 (bytes)
;       Spill Code: 0 (instruction)


;  120	
;  121	void discoverBombInSquare(t_case matrix[MAP_X_MAX][MAP_Y_MAX], t_pos cursor, int8_t square_length) {
_discoverBombInSquare:
	LD	HL,-9
	CALL	__frameset
;  122	    int8_t i;
;  123	    int8_t j;
;  124	    t_pos case_check;
;  125	    t_pos direction;
;  126	    case_check.x = cursor.x;
	LD	A,(IX+9)
	LD	(IX+-6),A
;  127	    case_check.y = cursor.y;
	LD	A,(IX+10)
	LD	(IX+-5),A
;  128	
;  129	    for(i = 0; i < square_length; i++) {
	LD	(IX+-2),0
	JR	L_70
L_68:
;  130	        for(j = 0; j < 2; j++) {
	LD	(IX+-1),0
	JR	L_62
L_60:
;  131	            direction.x = LINE_DIRECTIONS_X[j];
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	DE,_LINE_DIRECTIONS_X
	ADD	HL,DE
	LD	A,(HL)
	LD	(IX+-4),A
;  132	            direction.y = LINE_DIRECTIONS_Y[j];
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	DE,_LINE_DIRECTIONS_Y
	ADD	HL,DE
;  133	            discoverBombInLine(matrix, &case_check, (2 * i) + 1, direction);
	LD	IY,0
	LD	A,(HL)
	LD	(IX+-3),A
	PUSH	BC
	ADD	IY,SP
	LD	DE,IY
	LEA	HL,IX+-4
	LD	BC,2
	LDIR	
	LD	A,(IX+-2)
	ADD	A,A
	INC	A
	LD	C,A
	LD	B,0
	PUSH	BC
	PEA	IX+-6
	LD	DE,(IX+6)
	PUSH	DE
	LD	(IX+-9),BC
	CALL	_discoverBombInLine
	LD	BC,(IX+-9)
	POP	DE
	POP	DE
	POP	DE
	POP	DE
	INC	(IX+-1)
;  134	        }
L_62:
	LD	A,(IX+-1)
	CP	A,2
	JP	M,L_60
;  135	        for(j = 2; j < 4; j++) {
	LD	(IX+-1),2
	JR	L_66
L_64:
;  136	            direction.x = LINE_DIRECTIONS_X[j];
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	DE,_LINE_DIRECTIONS_X
	ADD	HL,DE
	LD	A,(HL)
	LD	(IX+-4),A
;  137	            direction.y = LINE_DIRECTIONS_Y[j];
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	DE,_LINE_DIRECTIONS_Y
	ADD	HL,DE
;  138	            discoverBombInLine(matrix, &case_check, (2 * i) + 2, direction);
	LD	IY,0
	LD	A,(HL)
	LD	(IX+-3),A
	PUSH	BC
	ADD	IY,SP
	LD	DE,IY
	LEA	HL,IX+-4
	LD	BC,2
	LDIR	
	LD	A,(IX+-2)
	ADD	A,A
	INC	A
	INC	A
	LD	C,A
	LD	B,0
	PUSH	BC
	PEA	IX+-6
	LD	DE,(IX+6)
	PUSH	DE
	LD	(IX+-9),BC
	CALL	_discoverBombInLine
	LD	BC,(IX+-9)
	POP	DE
	POP	DE
	POP	DE
	POP	DE
	INC	(IX+-1)
;  139	        }
L_66:
	LD	A,(IX+-1)
	CP	A,4
	CALL	__setflag
	JP	M,L_64
	INC	(IX+-2)
;  140	    }
L_70:
	LD	A,(IX+-2)
	CP	A,(IX+12)
	CALL	__setflag
	JP	M,L_68
;  141	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _discoverBombInSquare ***************************
;Name                         Addr/Register   Size   Type
;_LINE_DIRECTIONS_Y                  STATIC      4   variable
;_LINE_DIRECTIONS_X                  STATIC      4   variable
;case_check                            IX-6      2   variable
;direction                             IX-4      2   variable
;i                                     IX-2      1   variable
;j                                     IX-1      1   variable
;square_length                        IX+12      1   parameter
;cursor                                IX+9      2   parameter
;matrix                                IX+6      3   parameter


; Stack Frame Size: 24 (bytes)
;       Spill Code: 0 (instruction)


;  142	
;  143	void discoverBomb(t_case matrix[MAP_X_MAX][MAP_Y_MAX], t_pos cursor) {
_discoverBomb:
	LD	HL,-1
	CALL	__frameset
;  144	    int8_t max_case_check;
;  145	
;  146	    max_case_check = maxABCD(cursor.x, MAP_X_MAX - cursor.x, cursor.y, MAP_Y_MAX - cursor.y);
	LD	A,21
	SUB	A,(IX+10)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	C,(IX+10)
	LD	A,31
	PUSH	BC
	SUB	A,(IX+9)
	LD	C,A
	PUSH	BC
	LD	C,(IX+9)
	PUSH	BC
	CALL	_maxABCD
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-1),A
;  147	
;  148	    discoverBombInSquare(matrix, cursor, max_case_check);
	LD	C,(IX+-1)
	OR	A,A
	SBC	HL,HL
	LD	B,0
	PUSH	BC
	PUSH	BC
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+9
	LD	BC,2
	LDIR	
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_discoverBombInSquare
	POP	BC
	POP	BC
	POP	BC
;  149	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _discoverBomb ***************************
;Name                         Addr/Register   Size   Type
;max_case_check                        IX-1      1   variable
;cursor                                IX+9      2   parameter
;matrix                                IX+6      3   parameter


; Stack Frame Size: 13 (bytes)
;       Spill Code: 0 (instruction)


;  150	
;  151	void discoverCase(t_case matrix[MAP_X_MAX][MAP_Y_MAX], t_pos cursor) {
_discoverCase:
	LD	HL,-6
	CALL	__frameset
;  152	    t_case  *value = &matrix[cursor.x][cursor.y];
	LD	A,(IX+9)
	SEXT	HL
	LD	L,(IX+9)
	LD	A,63
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+10)
	SEXT	HL
	LD	L,(IX+10)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	(IX+-3),HL
;  153	
;  154	    value->visible = true;
	LD	IY,(IX+-3)
	LEA	HL,IY+2
	SET	7,(HL)
;  155	    value->flag = false;
	LEA	HL,IY+2
	RES	6,(HL)
;  156	
;  157	    printCase(matrix, cursor.x, cursor.y);
	LD	C,(IX+10)
	LD	B,0
	PUSH	BC
	LD	C,(IX+9)
	PUSH	BC
	LD	DE,(IX+6)
	PUSH	DE
	LD	(IX+-6),BC
	CALL	_printCase
	LD	BC,(IX+-6)
	POP	DE
	POP	DE
	POP	DE
;  158	
;  159	    if (value->bomb)
	LD	IY,(IX+-3)
	LD	HL,(IY+0)
	ADD	HL,HL
	ADD	HL,HL
	LD	A,23
	CALL	__ishru_b
	LD	A,L
	OR	A,A
	JR	Z,L_74
;  160	        discoverBomb(matrix, cursor);
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+9
	LD	BC,2
	LDIR	
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_discoverBomb
	POP	BC
	POP	BC
;  161	}
L_74:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _discoverCase ***************************
;Name                         Addr/Register   Size   Type
;_printCase                          IMPORT  -----   function
;value                                 IX-3      3   variable
;cursor                                IX+9      2   parameter
;matrix                                IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


;  162	
;  163	void checkAddToList(t_case matrix[MAP_X_MAX][MAP_Y_MAX], t_pos direction, t_list *elem) {
_checkAddToList:
	LD	HL,-3
	CALL	__frameset
;  164	    if (checkNullCase(matrix, direction))
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+9
	LD	BC,2
	LDIR	
	LD	DE,(IX+6)
	PUSH	DE
	LD	(IX+-3),BC
	CALL	_checkNullCase
	LD	BC,(IX+-3)
	POP	DE
	POP	DE
	OR	A,A
	JR	Z,L_76
;  165	        addPos(elem, direction);
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+9
	LD	BC,2
	LDIR	
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_addPos
	POP	BC
	POP	BC
;  166	}
L_76:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _checkAddToList ***************************
;Name                         Addr/Register   Size   Type
;_addPos                             IMPORT  -----   function
;elem                                 IX+12      3   parameter
;direction                             IX+9      2   parameter
;matrix                                IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


;  167	
;  168	void discoverCases(t_case matrix[MAP_X_MAX][MAP_Y_MAX], t_pos cursor) {
_discoverCases:
	LD	HL,-20
	CALL	__frameset
;  169	    uint8_t i;
;  170	    t_pos   direction;
;  171	    t_list  start;
;  172	    t_list  *elem;
;  173	
;  174	    start.next = NULL;
	LD	DE,0
	OR	A,A
;  175	
;  176	    checkAddToList(matrix, cursor, &start);
	SBC	HL,HL
	LD	(IX+-9),DE
	PEA	IX+-11
	PUSH	BC
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+9
	LD	BC,2
	LDIR	
	LD	DE,(IX+6)
	PUSH	DE
	LD	(IX+-20),BC
	CALL	_checkAddToList
	LD	BC,(IX+-20)
	POP	DE
	POP	DE
	POP	DE
;  177	    discoverCase(matrix, cursor);
	PUSH	BC
	LEA	HL,IX+9
	LD	BC,2
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LDIR	
	LD	DE,(IX+6)
	PUSH	DE
	LD	(IX+-20),BC
	CALL	_discoverCase
	LD	BC,(IX+-20)
	POP	DE
	POP	DE
;  178	
;  179	    elem = start.next;
	LD	DE,(IX+-9)
	LD	(IX+-6),DE
;  180	    while (elem) {
	JR	L_83
L_84:
;  181	        for(i = 0; i < MAX_DIRECTIONS; i++) {
	LD	(IX+-1),0
	JR	L_81
L_79:
;  182	            direction.x = elem->pos.x + DIRECTIONS[i].x;
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	DE,_DIRECTIONS
	ADD	HL,DE
	LD	(IX+-17),HL
	LD	IY,(IX+-6)
	LEA	DE,IY+0
	LD	(IX+-14),DE
	LD	IY,(IX+-17)
	LD	A,(IY+0)
	LD	IY,(IX+-14)
	ADD	A,(IY+0)
	LD	(IX+-3),A
;  183	            direction.y = elem->pos.y + DIRECTIONS[i].y;
	LD	IY,(IX+-17)
	LD	A,(IY+1)
	LD	IY,(IX+-14)
	ADD	A,(IY+1)
	LD	(IX+-2),A
;  184	            if (checkInnerMap(direction)) {
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+-3
	LD	BC,2
	LDIR	
	LD	(IX+-20),BC
	CALL	_checkInnerMap
	LD	BC,(IX+-20)
	POP	DE
	OR	A,A
	JR	Z,L_80
	OR	A,A
;  185	                checkAddToList(matrix, direction, elem);
	SBC	HL,HL
	LD	DE,(IX+-6)
	PUSH	DE
	PUSH	BC
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+-3
	LD	BC,2
	LDIR	
	LD	DE,(IX+6)
	PUSH	DE
	LD	(IX+-20),BC
	CALL	_checkAddToList
	LD	BC,(IX+-20)
	POP	DE
	POP	DE
	POP	DE
;  186	                discoverCase(matrix, direction);
	PUSH	BC
	LEA	HL,IX+-3
	LD	BC,2
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LDIR	
	LD	DE,(IX+6)
	PUSH	DE
	LD	(IX+-20),BC
	CALL	_discoverCase
	LD	BC,(IX+-20)
	POP	DE
	POP	DE
;  187	            }
;  188	        }
L_80:
	INC	(IX+-1)
L_81:
	LD	A,(IX+-1)
	CP	A,8
	JR	C,L_79
;  189	        elem = deleteGoNext(elem);
	LD	DE,(IX+-6)
	PUSH	DE
	LD	(IX+-20),BC
	CALL	_deleteGoNext
	LD	BC,(IX+-20)
	POP	DE
	LD	(IX+-6),HL
;  190	    }
L_83:
	LD	HL,(IX+-6)
	CALL	__icmpzero
	JR	NZ,L_84
;  191	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _discoverCases ***************************
;Name                         Addr/Register   Size   Type
;_deleteGoNext                       IMPORT  -----   function
;_DIRECTIONS                         STATIC     16   variable
;start                                IX-11      5   variable
;elem                                  IX-6      3   variable
;direction                             IX-3      2   variable
;i                                     IX-1      1   variable
;cursor                                IX+9      2   parameter
;matrix                                IX+6      3   parameter


; Stack Frame Size: 32 (bytes)
;       Spill Code: 0 (instruction)


;  192	
;  193	
;  194	
;  195	void putFlag(t_case matrix[MAP_X_MAX][MAP_Y_MAX], t_pos cursor) {
_putFlag:
	LD	HL,-12
	CALL	__frameset
;  196	    t_case  *value = &matrix[cursor.x][cursor.y];
	LD	A,(IX+9)
	SEXT	HL
	LD	L,(IX+9)
	LD	A,63
	CALL	__imul_b
	LD	A,(IX+10)
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	SEXT	HL
	LD	L,(IX+10)
	LD	DE,HL
;  197	
;  198	    if (value->visible)
	LD	A,23
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	IY,(IX+-3)
	LD	HL,(IY+0)
	CALL	__ishru_b
	LD	A,L
	OR	A,A
	JR	NZ,L_92
;  199	        return ;
;  200	
;  201	    value->flag = !value->flag;
	LD	IY,(IX+-3)
	LD	HL,(IY+0)
	ADD	HL,HL
	LD	A,23
	CALL	__ishru_b
	LD	A,L
	OR	A,A
	JR	NZ,L_88
	LD	BC,1
	LD	(IX+-6),BC
	JR	L_89
L_88:
	LD	BC,0
	LD	(IX+-6),BC
L_89:
	LD	A,(IX+-6)
	UEXT	HL
	LD	L,A
	LD	DE,(IX+-3)
	LD	IY,DE
	LD	(IX+-9),HL
	LD	HL,(IY+0)
	LD	BC,12582911
	CALL	__iand
	LD	(IX+-12),HL
	LD	HL,(IX+-9)
	LD	A,22
	CALL	__ishl_b
	LD	BC,4194304
	CALL	__iand
	LD	BC,HL
	LD	HL,(IX+-12)
	CALL	__ior
	LD	IY,DE
	LD	(IY+0),HL
;  202	    printCase(matrix, cursor.x, cursor.y);
	LD	C,(IX+10)
	LD	B,0
	PUSH	BC
	LD	C,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_printCase
	POP	BC
	POP	BC
	POP	BC
;  203	}
L_92:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _putFlag ***************************
;Name                         Addr/Register   Size   Type
;_printCase                          IMPORT  -----   function
;temp90                                IX-6      3   variable
;value                                 IX-3      3   variable
;cursor                                IX+9      2   parameter
;matrix                                IX+6      3   parameter


; Stack Frame Size: 24 (bytes)
;       Spill Code: 0 (instruction)


;  204	
;  205	uint8_t checkCanMove(t_pos *cursor, int8_t increment_x, int8_t increment_y) {
_checkCanMove:
	LD	HL,-6
	CALL	__frameset
;  206	    if (cursor->x + increment_x >= MAP_X_MAX || cursor->x + increment_x < 0)
	LD	IY,(IX+6)
	LD	A,(IY+0)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(IX+9)
	SEXT	HL
	LD	L,(IX+9)
	ADD	HL,BC
	LD	(IX+-3),HL
	OR	A,A
	LD	BC,31
	SBC	HL,BC
	JP	P,L_94
	LD	HL,(IX+-3)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_97
L_94:
;  207	        return (false);
	XOR	A,A
	JR	L_99
L_97:
;  208	    if (cursor->y + increment_y >= MAP_Y_MAX || cursor->y + increment_y < 0)
	LD	IY,(IX+6)
	LD	A,(IY+1)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(IX+12)
	SEXT	HL
	LD	L,(IX+12)
	ADD	HL,BC
	LD	(IX+-6),HL
	OR	A,A
	LD	BC,21
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_96
	LD	HL,(IX+-6)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_98
L_96:
;  209	        return (false);
	XOR	A,A
	JR	L_99
L_98:
;  210	    return (true);
	LD	A,1
;  211	}
L_99:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _checkCanMove ***************************
;Name                         Addr/Register   Size   Type
;G_1                                   IX-6      3   variable
;G_0                                   IX-3      3   variable
;increment_y                          IX+12      1   parameter
;increment_x                           IX+9      1   parameter
;cursor                                IX+6      3   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


;  212	
;  213	void moveCursor(t_case matrix[MAP_X_MAX][MAP_Y_MAX], t_pos *cursor, int8_t increment_x, int8_t increment_y) {
_moveCursor:
	LD	HL,-3
	CALL	__frameset
;  214	    if (!checkCanMove(cursor, increment_x, increment_y))
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	C,(IX+12)
	PUSH	BC
	LD	DE,(IX+9)
	PUSH	DE
	LD	(IX+-3),BC
	CALL	_checkCanMove
	LD	BC,(IX+-3)
	POP	DE
	POP	DE
	POP	DE
	OR	A,A
	JR	Z,L_102
;  215	        return ;
;  216	    deleteCursor(matrix, *cursor);
	LD	IY,0
	LD	HL,(IX+9)
	PUSH	BC
	ADD	IY,SP
	LD	DE,IY
	LD	BC,2
	LDIR	
	LD	DE,(IX+6)
	PUSH	DE
	LD	(IX+-3),BC
	CALL	_deleteCursor
	LD	BC,(IX+-3)
	POP	DE
	POP	DE
;  217	    cursor->x += increment_x;
	LD	IY,(IX+9)
	LD	A,(IY+0)
	ADD	A,(IX+12)
	LD	(IY+0),A
;  218	    cursor->y += increment_y;
	LD	A,(IY+1)
	ADD	A,(IX+15)
	LD	(IY+1),A
;  219	    printCursor(*cursor);
	LD	HL,(IX+9)
	PUSH	BC
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LD	BC,2
	LDIR	
	CALL	_printCursor
	POP	BC
;  220	}
L_102:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _moveCursor ***************************
;Name                         Addr/Register   Size   Type
;_printCursor                        IMPORT  -----   function
;_deleteCursor                       IMPORT  -----   function
;increment_y                          IX+15      1   parameter
;increment_x                          IX+12      1   parameter
;cursor                                IX+9      3   parameter
;matrix                                IX+6      3   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


;  221	
;  222	void lockDelay(kb_key_t *old_keys) {
_lockDelay:
	LD	HL,-8
	CALL	__frameset
;  223	    uint8_t pause = false;
	LD	(IX+-2),0
;  224	    uint8_t i;
;  225	    for (i = 1; i < 8; i++) {
	LD	(IX+-1),1
	JR	L_107
L_105:
;  226	        if (old_keys[i] != kb_Data[i]) {
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	BC,16056336
	ADD	HL,BC
	LD	(IX+-8),HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	(IX+-5),HL
	LD	HL,(IX+-8)
	LD	A,(HL)
	LD	HL,(IX+-5)
	CP	A,(HL)
	JR	Z,L_106
;  227	            pause = true;
	LD	(IX+-2),1
;  228	            old_keys[i] = kb_Data[i];
	LD	HL,(IX+-8)
	LD	A,(HL)
	LD	HL,(IX+-5)
	LD	(HL),A
;  229	        }
;  230	    }
L_106:
	INC	(IX+-1)
L_107:
	LD	A,(IX+-1)
	CP	A,8
	JR	C,L_105
;  231	
;  232	    if (pause)
	LD	A,(IX+-2)
	OR	A,A
	JR	Z,L_110
;  233	        delay(160);
	LD	BC,160
	PUSH	BC
	CALL	_delay
	POP	BC
L_110:
;  234	    delay(40);
	LD	BC,40
	PUSH	BC
	CALL	_delay
	POP	BC
;  235	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _lockDelay ***************************
;Name                         Addr/Register   Size   Type
;_delay                              IMPORT  -----   function
;G_2                                   IX-8      3   variable
;G_3                                   IX-5      3   variable
;pause                                 IX-2      1   variable
;i                                     IX-1      1   variable
;old_keys                              IX+6      3   parameter


; Stack Frame Size: 17 (bytes)
;       Spill Code: 0 (instruction)


;  236	
;  237	void keyArrow(t_case matrix[MAP_X_MAX][MAP_Y_MAX], t_pos *cursor) {
_keyArrow:
	LD	HL,-1
	CALL	__frameset
;  238	    kb_key_t key = kb_Data[7];
	LD	A,(16056350)
	LD	(IX+-1),A
;  239	
;  240	    if (key & kb_Down)
	AND	A,1
	JR	Z,L_114
;  241	        moveCursor(matrix, cursor, MOVE_DOWN);
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_moveCursor
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_114:
;  242	    if (key & kb_Up)
	LD	A,(IX+-1)
	AND	A,8
	JR	Z,L_116
;  243	        moveCursor(matrix, cursor, MOVE_UP);
	LD	BC,16777215
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_moveCursor
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_116:
;  244	    if (key & kb_Left)
	LD	A,(IX+-1)
	AND	A,2
	JR	Z,L_118
;  245	        moveCursor(matrix, cursor, MOVE_LEFT);
	LD	BC,0
	PUSH	BC
	LD	BC,16777215
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_moveCursor
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_118:
;  246	    if (key & kb_Right)
	LD	A,(IX+-1)
	AND	A,4
	JR	Z,L_119
;  247	        moveCursor(matrix, cursor, MOVE_RIGHT);
	LD	BC,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_moveCursor
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  248	}
L_119:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _keyArrow ***************************
;Name                         Addr/Register   Size   Type
;key                                   IX-1      1   variable
;cursor                                IX+9      3   parameter
;matrix                                IX+6      3   parameter


; Stack Frame Size: 13 (bytes)
;       Spill Code: 0 (instruction)


;  249	
;  250	void keyAction(t_case matrix[MAP_X_MAX][MAP_Y_MAX], t_pos cursor) {
_keyAction:
	LD	HL,-3
	CALL	__frameset
;  251	
;  252	    if (kb_Data[5] & kb_Chs) {
	LD	A,(16056346)
	AND	A,1
	JR	Z,L_122
;  253	        putFlag(matrix, cursor);
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+9
	LD	BC,2
	LDIR	
	LD	DE,(IX+6)
	PUSH	DE
	LD	(IX+-3),BC
	CALL	_putFlag
	LD	BC,(IX+-3)
	POP	DE
	POP	DE
;  254	        printCursor(cursor);
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+9
	LD	BC,2
	LDIR	
	LD	(IX+-3),BC
	CALL	_printCursor
	LD	BC,(IX+-3)
	POP	DE
;  255	    }
L_122:
;  256	    if (kb_Data[6] & kb_Enter) {
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_123
;  257	        discoverCases(matrix, cursor);
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+9
	LD	BC,2
	LDIR	
	LD	DE,(IX+6)
	PUSH	DE
	LD	(IX+-3),BC
	CALL	_discoverCases
	LD	BC,(IX+-3)
	POP	DE
	POP	DE
;  258	        printCursor(cursor);
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+9
	LD	BC,2
	LDIR	
	CALL	_printCursor
	POP	BC
;  259	    }
;  260	}
L_123:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _keyAction ***************************
;Name                         Addr/Register   Size   Type
;_printCursor                        IMPORT  -----   function
;cursor                                IX+9      2   parameter
;matrix                                IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


;  261	
;  262	void gameLoop(t_case matrix[MAP_X_MAX][MAP_Y_MAX], t_pos *cursor) {
_gameLoop:
	LD	HL,-11
	CALL	__frameset
;  263	    kb_key_t   old_key[8];
;  264	
;  265	    do {
L_124:
	LD	(IX+-11),BC
;  266	        kb_Scan();
	CALL	_kb_Scan
	LD	BC,(IX+-11)
;  267	        keyArrow(matrix, cursor);
	LD	DE,(IX+9)
	PUSH	DE
	LD	DE,(IX+6)
	PUSH	DE
	LD	(IX+-11),BC
	CALL	_keyArrow
	LD	BC,(IX+-11)
	POP	DE
	POP	DE
;  268	        keyAction(matrix, *cursor);
	LD	HL,(IX+9)
	PUSH	BC
	LD	BC,2
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LDIR	
	LD	DE,(IX+6)
	PUSH	DE
	LD	(IX+-11),BC
	CALL	_keyAction
	LD	BC,(IX+-11)
	POP	DE
	POP	DE
;  269	        lockDelay(old_key);
	PEA	IX+-8
	LD	(IX+-11),BC
	CALL	_lockDelay
	LD	BC,(IX+-11)
	POP	DE
;  270	    } while (!(kb_Data[1] & kb_Del));
	LD	A,(16056338)
	AND	A,128
	JR	Z,L_124
;  271	
;  272	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _gameLoop ***************************
;Name                         Addr/Register   Size   Type
;_kb_Scan                            IMPORT  -----   function
;old_key                               IX-8      8   variable
;cursor                                IX+9      3   parameter
;matrix                                IX+6      3   parameter


; Stack Frame Size: 23 (bytes)
;       Spill Code: 0 (instruction)


;  273	
;  274	void play(void) {
_play:
	LD	HL,-1958
	CALL	__frameset
;  275	    t_case  matrix[MAP_X_MAX][MAP_Y_MAX];
;  276	    t_pos   cursor;
;  277	    initCursor(&cursor);
	PEA	IX+-2
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-1958
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_initCursor
	LD	BC,-1958
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	POP	DE
;  278	
;  279	
;  280	    initMatrix(matrix);
	LD	HL,IX
	LD	DE,-1955
	ADD	HL,DE
	LD	DE,HL
	PUSH	DE
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-1958
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_initMatrix
	LD	BC,-1958
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	POP	DE
;  281	    mapGenerator(matrix, 100);
	LD	DE,100
	PUSH	DE
	LD	HL,IX
	LD	DE,-1955
	ADD	HL,DE
	LD	DE,HL
	PUSH	DE
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-1958
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_mapGenerator
	LD	BC,-1958
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	POP	DE
	POP	DE
;  282	    printScreen(matrix, cursor);
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+-2
	LD	BC,2
	LDIR	
	LD	HL,IX
	LD	BC,-1955
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_printScreen
	POP	BC
	POP	BC
;  283	    gameLoop(matrix, &cursor);
	PEA	IX+-2
	LD	HL,IX
	LD	BC,-1955
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_gameLoop
	POP	BC
	POP	BC
;  284	
;  285	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _play ***************************
;Name                         Addr/Register   Size   Type
;_printScreen                        IMPORT  -----   function
;matrix                             IX-1955   1953   variable
;cursor                                IX-2      2   variable


; Stack Frame Size: 1964 (bytes)
;       Spill Code: 0 (instruction)


	XREF _deleteGoNext:ROM
	XREF _addPos:ROM
	XREF _deleteCursor:ROM
	XREF _printCursor:ROM
	XREF _printScreen:ROM
	XREF _printCase:ROM
	XREF _kb_Scan:ROM
	XREF _delay:ROM
	XREF _srandom:ROM
	XREF _random:ROM
	XREF __ior:ROM
	XREF __iand:ROM
	XREF __lremu:ROM
	XREF __lshru:ROM
	XREF __stoiu:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __imul_b:ROM
	XREF __ishl_b:ROM
	XREF __ishru_b:ROM
	XDEF _play
	XDEF _gameLoop
	XDEF _keyAction
	XDEF _keyArrow
	XDEF _lockDelay
	XDEF _moveCursor
	XDEF _checkCanMove
	XDEF _putFlag
	XDEF _discoverCases
	XDEF _checkAddToList
	XDEF _discoverCase
	XDEF _discoverBomb
	XDEF _discoverBombInSquare
	XDEF _discoverBombInLine
	XDEF _checkNullCase
	XDEF _initMatrix
	XDEF _initCursor
	XDEF _mapGenerator
	XDEF _putBomb
	XDEF _checkInnerMap
	XDEF _maxABCD
	XDEF _LINE_DIRECTIONS_Y
	XDEF _LINE_DIRECTIONS_X
	XDEF _DIRECTIONS
	END
